<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA基础</title>
    <link href="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h1><h3 id="一、数据库概述与MySQL安装篇"><a href="#一、数据库概述与MySQL安装篇" class="headerlink" title="一、数据库概述与MySQL安装篇"></a>一、数据库概述与MySQL安装篇</h3><h5 id="1-1-数据库与数据库管理系统"><a href="#1-1-数据库与数据库管理系统" class="headerlink" title="1.1 数据库与数据库管理系统"></a>1.1 数据库与数据库管理系统</h5><p><strong>数据库的相关概念</strong></p><ul><li>DB：数据库（Database）</li><li>DBMS：数据库管理系统（Database Management System）</li><li>SQL：结构化查询语言（Structured Query Language）</li></ul><p><strong>数据库与数据管理系统的关系</strong></p><p>​数据库管理系统(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。 </p><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403083821801.png" class title="image-20230403083821801"><h5 id="1-2-关系型数据库（RDBMS）"><a href="#1-2-关系型数据库（RDBMS）" class="headerlink" title="1.2 关系型数据库（RDBMS）"></a>1.2 关系型数据库（RDBMS）</h5><p>​关系型数据库模型是把复杂的数据结构归结为简单的<code>二元关系</code>（即二维表格形式）。以<code>行(row)</code>和<code>列(column)</code>的形式存储数据，以便于用户理解。这一系列的行和列被称为<code>表(table)</code>，一组表组成了一个库(database)。SQL 是关系型数据库的查询语言。</p><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403084258861.png" class title="image-20230403084258861"><p>优势：<strong>复杂查询</strong>可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。<strong>事务支持</strong>使得对于安全性能很高的数据访问要求得以实现。</p><h5 id="1-3-非关系型数据库-非RDBMS"><a href="#1-3-非关系型数据库-非RDBMS" class="headerlink" title="1.3 非关系型数据库(非RDBMS)"></a>1.3 非关系型数据库(非RDBMS)</h5><p>​<strong>非关系型数据库</strong>，可看成传统关系型数据库的功能<code>阉割版本</code>，基于键值对存储数据，不需要经过SQL层的解析，<code>性能非常高</code>。同时，通过减少不常用的功能，进一步提高性能。</p><p>​非关系型数据库有：<strong>键值型数据库</strong>（Redis）、<strong>文档型数据库</strong>（MongoDB）、<strong>搜索引擎数据库</strong>（Elasticsearch）、<strong>列式数据库</strong>（HBase）、<strong>图形数据库</strong>（Neo4J、InfoGrid）</p><h5 id="1-4-关系型数据库设计规则"><a href="#1-4-关系型数据库设计规则" class="headerlink" title="1.4 关系型数据库设计规则"></a>1.4 关系型数据库设计规则</h5><ul><li><p>关系型数据库的典型数据结构就是<code>数据表</code>，这些数据表的组成都是结构化的（Structured）。</p></li><li><p>将数据放到表中，表再放到库中。</p></li><li><p>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</p></li><li><p>表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中 “类”的设计。</p></li></ul><p><strong>表、记录、字段</strong></p><p>​E-R（entity-relationship，实体-联系）模型中有三个主要概念是：<code>实体集</code>、<code>属性</code>、<code>联系集</code>。一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列（column），也称为一个字段（field）。</p><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403085405211.png" class title="image-20230403085405211"><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">ORM思想 (Object Relational Mapping)体现：<br>数据库中的一个表  &lt;---&gt; Java或Python中的一个类<br>表中的一条数据  &lt;---&gt; 类中的一个对象（或实体）<br>表中的一个列  &lt;----&gt; 类中的一个字段、属性(field)<br></code></pre></td></tr></table></figure><h5 id="1-5-表的关联关系"><a href="#1-5-表的关联关系" class="headerlink" title="1.5 表的关联关系"></a>1.5 表的关联关系</h5><h6 id="1-5-1一对一关联"><a href="#1-5-1一对一关联" class="headerlink" title="1.5.1一对一关联"></a>1.5.1一对一关联</h6><p>​在实际的开发中应用不多，因为一对一可以创建成一张表。</p><p>举例：设计<code>学生表</code>：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人、…</p><ul><li><p>拆为两个表：两个表的记录是一一对应关系。</p></li><li><p><code>基础信息表</code>（常用信息）：学号、姓名、手机号码、班级、系别</p></li><li><p><code>档案信息表</code>（不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、…</p></li></ul><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403085740121.png" class title="image-20230403085740121"><ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。 </li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul><h6 id="1-5-2一对多"><a href="#1-5-2一对多" class="headerlink" title="1.5.2一对多"></a>1.5.2一对多</h6><p>常见实例场景：<code>客户表和订单表</code>，<code>分类表和商品表</code>，<code>部门表和员工表</code>。</p><p>举例：</p><ul><li><p>员工表：编号、姓名、…、所属部门</p></li><li><p>部门表：编号、名称、简介</p></li></ul><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403090816599.png" class title="image-20230403090816599"><h6 id="1-5-3多对多"><a href="#1-5-3多对多" class="headerlink" title="1.5.3多对多"></a>1.5.3多对多</h6><p>​要表示多对多关系，必须创建第三个表，该表通常称为<code>联接表</code>，它将多对多关系划分为两个一对多关系。将这两个表的主键都插入到第三个表中。</p><p><strong>举例1：学生-课程</strong></p><ul><li><p><code>学生信息表</code>：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别…）</p></li><li><p><code>课程信息表</code>：一行代表一个课程的信息（课程编号、授课老师、简介…）</p></li><li><p><code>选课信息表</code>：一个学生可以选多门课，一门课可以被多个学生选择</p></li></ul><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403090935762.png" class title="image-20230403090935762"><h3 id="二、SQL之SELECT使用篇"><a href="#二、SQL之SELECT使用篇" class="headerlink" title="二、SQL之SELECT使用篇"></a>二、SQL之SELECT使用篇</h3><h5 id="2-1SQL语言的规则与规范"><a href="#2-1SQL语言的规则与规范" class="headerlink" title="2.1SQL语言的规则与规范"></a>2.1SQL语言的规则与规范</h5><p><strong>SQL概述</strong></p><p>SQL（Structured Query Language，结构化查询语言）是使用关系模型的数据库应用语言，<code>与数据直接打交道</code>。</p><p>SQL语言在功能上主要分为如下3大类：</p><ul><li><p><strong>DDL（Data Definition Languages、数据定义语言）</strong>，这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</p><ul><li>主要的语句关键字包括<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>等。</li></ul></li><li><p><strong>DML（Data Manipulation Language、数据操作语言）</strong>，用于添加、删除、更新和查询数据库记录，并检查数据完整性。</p><ul><li>主要的语句关键字包括<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code>等。</li><li><strong>SELECT是SQL语言的基础，最为重要。</strong></li></ul></li><li><p><strong>DCL（Data Control Language、数据控制语言）</strong>，用于定义数据库、表、字段、用户的访问权限和安全级别。</p><ul><li>主要的语句关键字包括<code>GRANT</code>、<code>REVOKE</code>、<code>COMMIT</code>、<code>ROLLBACK</code>、<code>SAVEPOINT</code>等。</li></ul></li></ul><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。</p><p><strong>规则与规范</strong></p><ul><li><p>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</p></li><li><p>每条命令以 ; 结束</p></li><li><p>关于标点符号</p><ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li><li><p><strong>MySQL 在 Windows 环境下是大小写不敏感的</strong></p></li><li><p><strong>MySQL 在 Linux 环境下是大小写敏感的</strong></p><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><p><strong>推荐采用统一的书写规范：</strong></p><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><p>可以使用如下格式的注释结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">单行注释：#注释文字(MySQL特有的方式)<br>单行注释：-- 注释文字(--后面必须包含一个空格。)<br>多行注释：/* 注释文字  */<br></code></pre></td></tr></table></figure><h5 id="2-2-基本的SELECT语句"><a href="#2-2-基本的SELECT语句" class="headerlink" title="2.2 基本的SELECT语句"></a>2.2 基本的SELECT语句</h5><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 选择哪些列  <span class="hljs-keyword">FROM</span> 从哪个表中选择;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> departments; <span class="hljs-comment">-- 选择全部列</span><br></code></pre></td></tr></table></figure><p><strong>给列起别名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">AS</span> name, commission_pct comm<br><span class="hljs-keyword">FROM</span>   employees;<br></code></pre></td></tr></table></figure><p><strong>使用关键字DISTINCT去除重复行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p><strong>空值参与运算</strong></p><p>所有运算符或列值遇到null值，<strong>运算的结果都为null</strong></p><p><strong>着重号</strong></p><p>​我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，请在SQL语句中使用一对&#96;&#96;（着重号）引起来</p><p><strong>查询表结构</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESCRIBE</span> employees;<br>或<br><span class="hljs-keyword">DESC</span> employees;<br></code></pre></td></tr></table></figure><p><strong>过滤数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span><br><span class="hljs-keyword">FROM</span> 表名<br><span class="hljs-keyword">WHERE</span> 过滤条件<br></code></pre></td></tr></table></figure><h5 id="2-3运算符"><a href="#2-3运算符" class="headerlink" title="2.3运算符"></a>2.3运算符</h5><p>​<strong>算术运算符</strong>：主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（&#x2F;）和取模（%）运算。</p><p>​<strong>比较运算符</strong>：用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403093930404.png" class title="image-20230403093930404"><p><strong>非符号类型的运算符：</strong></p><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403094123525.png" class title="image-20230403094123525"><p> <strong>逻辑运算符：</strong></p><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403094222360.png" class title="image-20230403094222360"><h5 id="2-4-排序与分页"><a href="#2-4-排序与分页" class="headerlink" title="2.4 排序与分页"></a>2.4 排序与分页</h5><p><strong>排序规则</strong></p><ul><li>使用 ORDER BY 子句排序<ul><li><strong>ASC（ascend）: 升序</strong></li><li><strong>DESC（descend）:降序</strong></li></ul></li><li><strong>ORDER BY 子句在SELECT语句的结尾。</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 单列排序</span><br><span class="hljs-keyword">SELECT</span>   last_name, job_id, department_id, hire_date<br><span class="hljs-keyword">FROM</span>     employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date ;<br><span class="hljs-comment">-- 多列排序</span><br><span class="hljs-keyword">SELECT</span> last_name, department_id, salary<br><span class="hljs-keyword">FROM</span>   employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> department_id, salary <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p><strong>分页</strong></p><p>分页原理：所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">LIMIT [位置偏移量,] 行数 <span class="hljs-comment">-- LIMIT 子句必须放在整个SELECT语句的最后！</span><br></code></pre></td></tr></table></figure><h5 id="2-5-多表查询"><a href="#2-5-多表查询" class="headerlink" title="2.5 多表查询"></a>2.5 多表查询</h5><p>​多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p><img src="/2023/04/03/MySQL%E5%9F%BA%E7%A1%80/image-20230403103349723.png" class title="image-20230403103349723"><p><strong>基本语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> table1.column, table2.column,table3.column<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">JOIN</span> table2 <span class="hljs-keyword">ON</span> table1 和 table2 的连接条件<br><span class="hljs-keyword">JOIN</span> table3 <span class="hljs-keyword">ON</span> table2 和 table3 的连接条件<br></code></pre></td></tr></table></figure><p><strong>内连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表<br><span class="hljs-keyword">FROM</span> A表 <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> B表<br><span class="hljs-keyword">ON</span> 关联条件<br><span class="hljs-keyword">WHERE</span> 等其他子句;<br></code></pre></td></tr></table></figure><p><strong>左外连接(LEFT OUTER JOIN)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表<br><span class="hljs-keyword">FROM</span> A表 <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> B表<br><span class="hljs-keyword">ON</span> 关联条件<br><span class="hljs-keyword">WHERE</span> 等其他子句;<br></code></pre></td></tr></table></figure><p><strong>右外连接(RIGHT OUTER JOIN)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 字段列表<br><span class="hljs-keyword">FROM</span> A表 <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> B表<br><span class="hljs-keyword">ON</span> 关联条件<br><span class="hljs-keyword">WHERE</span> 等其他子句;<br></code></pre></td></tr></table></figure><h5 id="2-6-MySQL函数"><a href="#2-6-MySQL函数" class="headerlink" title="2.6 MySQL函数"></a>2.6 MySQL函数</h5><p>​MySQL提供了丰富的内置函数，这些函数使得数据的维护与管理更加方便，能够更好地提供数据的分析与统计功能，在一定程度上提高了开发人员进行数据分析与统计的效率。</p><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li><strong>只对一行进行变换</strong></li><li><strong>每行返回一个结果</strong></li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul><p><strong>数值型函数</strong></p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td><a href="http://c.biancheng.net/mysql/abc.html">ABS</a></td><td>求绝对值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/sqrt.html">SQRT</a></td><td>求二次方根</td></tr><tr><td><a href="http://c.biancheng.net/mysql/mod.html">MOD</a></td><td>求余数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/ceil_celing.html">CEIL 和 CEILING</a></td><td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td><a href="http://c.biancheng.net/mysql/floor.html">FLOOR</a></td><td>向下取整，返回值转化为一个BIGINT</td></tr><tr><td><a href="http://c.biancheng.net/mysql/rand.html">RAND</a></td><td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td><a href="http://c.biancheng.net/mysql/round.html">ROUND</a></td><td>对所传参数进行四舍五入</td></tr><tr><td><a href="http://c.biancheng.net/mysql/sign.html">SIGN</a></td><td>返回参数的符号</td></tr><tr><td><a href="http://c.biancheng.net/mysql/pow_power.html">POW 和 POWER</a></td><td>两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/sin.html">SIN</a></td><td>求正弦值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/asin.html">ASIN</a></td><td>求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/cos.html">COS</a></td><td>求余弦值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/acos.html">ACOS</a></td><td>求反余弦值，与函数 COS 互为反函数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/tan.html">TAN</a></td><td>求正切值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/atan.html">ATAN</a></td><td>求反正切值，与函数 TAN 互为反函数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/cot.html">COT</a></td><td>求余切值</td></tr></tbody></table><p><strong>字符串函数</strong></p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td><a href="http://c.biancheng.net/mysql/length.html">LENGTH</a></td><td>计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td><a href="http://c.biancheng.net/mysql/concat.html">CONCAT</a></td><td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td><a href="http://c.biancheng.net/mysql/insert.html">INSERT</a></td><td>替换字符串函数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/lower.html">LOWER</a></td><td>将字符串中的字母转换为小写</td></tr><tr><td><a href="http://c.biancheng.net/mysql/upper.html">UPPER</a></td><td>将字符串中的字母转换为大写</td></tr><tr><td><a href="http://c.biancheng.net/mysql/left.html">LEFT</a></td><td>从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td><a href="http://c.biancheng.net/mysql/right.html">RIGHT</a></td><td>从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td><a href="http://c.biancheng.net/mysql/trim.html">TRIM</a></td><td>删除字符串左右两侧的空格</td></tr><tr><td><a href="http://c.biancheng.net/mysql/replace.html">REPLACE</a></td><td>字符串替换函数，返回替换后的新字符串</td></tr><tr><td><a href="http://c.biancheng.net/mysql/substring.html">SUBSTRING</a></td><td>截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td><a href="http://c.biancheng.net/mysql/reverse.html">REVERSE</a></td><td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr></tbody></table><p> <strong>日期和时间函数</strong></p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td><a href="http://c.biancheng.net/mysql/curdate_current_date.html">CURDATE 和 CURRENT_DATE</a></td><td>两个函数作用相同，返回当前系统的日期值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/curtime_current_time.html">CURTIME 和 CURRENT_TIME</a></td><td>两个函数作用相同，返回当前系统的时间值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/now_sysdate.html">NOW 和 SYSDATE</a></td><td>两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/unix_timestamp.html">UNIX_TIMESTAMP</a></td><td>获取UNIX时间戳函数，返回一个以 UNIX 时间戳为基础的无符号整数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/from_unixtime.html">FROM_UNIXTIME</a></td><td>将 UNIX 时间戳转换为时间格式，与UNIX_TIMESTAMP互为反函数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/month.html">MONTH</a></td><td>获取指定日期中的月份</td></tr><tr><td><a href="http://c.biancheng.net/mysql/monthname.html">MONTHNAME</a></td><td>获取指定日期中的月份英文名称</td></tr><tr><td><a href="http://c.biancheng.net/mysql/dayname.html">DAYNAME</a></td><td>获取指定曰期对应的星期几的英文名称</td></tr><tr><td><a href="http://c.biancheng.net/mysql/dayofweek.html">DAYOFWEEK</a></td><td>获取指定日期对应的一周的索引位置值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/week.html">WEEK</a></td><td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td><a href="http://c.biancheng.net/mysql/dayofyear.html">DAYOFYEAR</a></td><td>获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td><a href="http://c.biancheng.net/mysql/dayofmonth.html">DAYOFMONTH</a></td><td>获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td><a href="http://c.biancheng.net/mysql/year.html">YEAR</a></td><td>获取年份，返回值范围是 1970〜2069</td></tr><tr><td><a href="http://c.biancheng.net/mysql/time_to_sec.html">TIME_TO_SEC</a></td><td>将时间参数转换为秒数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/sec_to_time.html">SEC_TO_TIME</a></td><td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/date_add_adddate.html">DATE_ADD 和 ADDDATE</a></td><td>两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td><a href="http://c.biancheng.net/mysql/date_sub_subdate.html">DATE_SUB 和 SUBDATE</a></td><td>两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td><a href="http://c.biancheng.net/mysql/addtime.html">ADDTIME</a></td><td>时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td><a href="http://c.biancheng.net/mysql/subtime.html">SUBTIME</a></td><td>时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td><a href="http://c.biancheng.net/mysql/datediff.html">DATEDIFF</a></td><td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/date_format.html">DATE_FORMAT</a></td><td>格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/weekday.html">WEEKDAY</a></td><td>获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><p><strong>聚合函数</strong></p><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td><a href="http://c.biancheng.net/mysql/max.html">MAX</a></td><td>查询指定列的最大值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/min.html">MIN</a></td><td>查询指定列的最小值</td></tr><tr><td><a href="http://c.biancheng.net/mysql/count.html">COUNT</a></td><td>统计查询结果的行数</td></tr><tr><td><a href="http://c.biancheng.net/mysql/sum.html">SUM</a></td><td>求和，返回指定列的总和</td></tr><tr><td><a href="http://c.biancheng.net/mysql/avg.html">AVG</a></td><td>求平均值，返回指定列数据的平均值</td></tr></tbody></table><p><strong>流程控制函数</strong></p><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td><a href="http://c.biancheng.net/mysql/if.html">IF</a></td><td>判断，流程控制</td></tr><tr><td><a href="http://c.biancheng.net/mysql/ifnull.html">IFNULL</a></td><td>判断是否为空</td></tr><tr><td><a href="http://c.biancheng.net/mysql/case.html">CASE</a></td><td>搜索语句</td></tr></tbody></table><h5 id="2-7-子查询"><a href="#2-7-子查询" class="headerlink" title="2.7 子查询"></a>2.7 子查询</h5><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</strong>  </p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><p><strong>标量子查询</strong></p><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;  </p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询销售部所有员工<br>select id from dept where name = &#x27;销售部&#x27;;<br>-- 根据销售部部门ID，查询员工信息<br>select * from employee where dept = 4;<br>-- 合并（子查询）  <br>select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);  <br><br>-- 查询xxx入职之后的员工信息  <br>select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);  <br></code></pre></td></tr></table></figure><p><strong>列子查询</strong></p><p>返回的结果是一列（可以是多行）。  </p><p>常用操作符：  </p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询销售部和市场部的所有员工信息  <br>select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);<br>-- 查询比财务部所有人工资都高的员工信息<br>select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));<br>-- 查询比研发部任意一人工资高的员工信息<br>select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));<br></code></pre></td></tr></table></figure><p><strong>行子查询</strong></p><p>返回的结果是一行（可以是多列）。<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询与xxx的薪资及直属领导相同的员工信息  <br>select * from employee where (salary, manager) = (12500, 1);  <br>select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);  <br></code></pre></td></tr></table></figure><p><strong>表子查询</strong></p><p>返回的结果是多行多列<br>常用操作符：IN  </p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询与xxx1，xxx2的职位和薪资相同的员工<br>select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);<br>-- 查询入职日期是2006-01-01之后的员工，及其部门信息<br>select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;<br></code></pre></td></tr></table></figure><h3 id="三、SQL之DDL、DML、DCL使用篇"><a href="#三、SQL之DDL、DML、DCL使用篇" class="headerlink" title="三、SQL之DDL、DML、DCL使用篇"></a>三、SQL之DDL、DML、DCL使用篇</h3><h5 id="3-1DDL（数据定义语言）"><a href="#3-1DDL（数据定义语言）" class="headerlink" title="3.1DDL（数据定义语言）"></a>3.1DDL（数据定义语言）</h5><p><strong>数据库操作</strong></p><p>查询所有数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><p>查询当前数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure><p>创建数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE [ IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ] 数据库名 [ <span class="hljs-keyword">DEFAULT</span> CHARSET 字符集] [<span class="hljs-keyword">COLLATE</span> 排序规则 ];  <br></code></pre></td></tr></table></figure><p>删除数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE [ IF <span class="hljs-keyword">EXISTS</span> ] 数据库名;<br></code></pre></td></tr></table></figure><p>  使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE 数据库名;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用<strong>utf8mb4字符集</strong></li></ul><p><strong>表操作</strong></p><p>查询当前数据库所有表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><p>查询表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 表名;<br></code></pre></td></tr></table></figure><p>查询指定表的建表语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段1 字段1类型 [COMMENT 字段1注释],<br>字段2 字段2类型 [COMMENT 字段2注释],<br>字段3 字段3类型 [COMMENT 字段3注释],<br>...<br>字段n 字段n类型 [COMMENT 字段n注释]<br>)[ COMMENT 表注释 ];<br></code></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 字段名 类型(长度) [COMMENT 注释] [约束];` <br>例：<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp <span class="hljs-keyword">ADD</span> nickname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>;<br></code></pre></td></tr></table></figure><p>修改数据类型： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);<br></code></pre></td></tr></table></figure><p>修改字段名和字段类型： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];<br>例：将emp表的nickname字段修改为username，类型为<span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)  <br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp CHANGE nickname username <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 字段名;<br></code></pre></td></tr></table></figure><p>修改表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 RENAME <span class="hljs-keyword">TO</span> 新表名<br></code></pre></td></tr></table></figure><p>删除表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名;<br></code></pre></td></tr></table></figure><p>删除表，并重新创建该表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h5 id="3-2-DML（数据操作语言）"><a href="#3-2-DML（数据操作语言）" class="headerlink" title="3.2 DML（数据操作语言）"></a>3.2 DML（数据操作语言）</h5><p><strong>添加数据</strong></p><p>指定字段： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 (字段名<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span>, ...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>全部字段： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>批量添加数据：   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 (字段名<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span>, ...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...), (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...), (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...), (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...), (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);` <br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><p><strong>更新和删除数据</strong></p><p>修改数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span>, ... [ <span class="hljs-keyword">WHERE</span> 条件 ]; <br>例: <span class="hljs-keyword">UPDATE</span> emp <span class="hljs-keyword">SET</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jack&#x27;</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>删除数据：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 [ <span class="hljs-keyword">WHERE</span> 条件 ];<br></code></pre></td></tr></table></figure><h5 id="3-3-DCL-数据控制语言"><a href="#3-3-DCL-数据控制语言" class="headerlink" title="3.3 DCL(数据控制语言)"></a>3.3 DCL(数据控制语言)</h5><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USER mysql;<br>SELECT * FROM user;<br></code></pre></td></tr></table></figure><p>创建用户:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>修改用户密码：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除用户：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建用户test，只能在当前主机localhost访问<br>create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;<br>-- 创建用户test，能在任意主机访问<br>create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;<br>create user &#x27;test&#x27; identified by &#x27;123456&#x27;;<br>-- 修改密码<br>alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;<br>-- 删除用户<br>drop user &#x27;test&#x27;@&#x27;localhost&#x27;;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>主机名可以使用 % 通配</li></ul><p><strong>常用权限：</strong></p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><p>查询权限：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>授予权限：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p>撤销权限：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> 权限列表 <span class="hljs-keyword">ON</span> 数据库名.表名 <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;主机名&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h5 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h5><p><strong>整型</strong></p><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><p><strong>浮点型</strong></p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><p><strong>日期和时间</strong></p><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><p><strong>字符串</strong></p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; &#x3D; M和 1&lt;&#x3D;M&lt;&#x3D;255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><p><strong>二进制类型</strong></p><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)&#x2F;8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h5 id="3-5-约束"><a href="#3-5-约束" class="headerlink" title="3.5 约束"></a>3.5 约束</h5><ol><li>概念：约束是用来作用于表中字段上的规则，用于限制存储在表中的数据。</li><li>目的：保证数据库中的数据的正确、有效性和完整性</li></ol><p><strong>约束分类</strong></p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p><strong>常用约束</strong></p><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p><strong>外键约束</strong></p><p>​外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p><p>添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(<br>字段名 字段类型,<br>...<br>[<span class="hljs-keyword">CONSTRAINT</span>] [外键名称] <span class="hljs-keyword">FOREIGN</span> KEY(外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表列名)<br>);  <br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN</span> KEY (外键字段名) <span class="hljs-keyword">REFERENCES</span> 主表(主表列名);<br><br><span class="hljs-comment">-- 例子  </span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp_dept_id <span class="hljs-keyword">foreign</span> key(dept_id) <span class="hljs-keyword">references</span> dept(id);  <br></code></pre></td></tr></table></figure><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY 外键名;<br></code></pre></td></tr></table></figure><h3 id="四、其它数据库对象篇"><a href="#四、其它数据库对象篇" class="headerlink" title="四、其它数据库对象篇"></a>四、其它数据库对象篇</h3><h5 id="4-1视图"><a href="#4-1视图" class="headerlink" title="4.1视图"></a>4.1视图</h5><p>​视图（View）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。  </p><p>​通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。  </p><p><strong>创建视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [ <span class="hljs-keyword">OR</span> REPLACE ] <span class="hljs-keyword">VIEW</span> 视图名称[（列名列表）] <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> 语句 [ <span class="hljs-keyword">WITH</span> [ <span class="hljs-keyword">CASCADED</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">LOCAL</span> ] <span class="hljs-keyword">CHECK</span> OPTION ]<br>例:<span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> stu_wll <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p><strong>查询视图</strong></p><p>查看创建视图语句： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名称；  <br></code></pre></td></tr></table></figure><p>查看视图数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> 视图名称；  <br></code></pre></td></tr></table></figure><p><strong>修改视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">方式一：<span class="hljs-keyword">CREATE</span>[<span class="hljs-keyword">OR</span> REPLACE] <span class="hljs-keyword">VIEW</span> 视图名称[（列名列表)）] <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> 语句[ <span class="hljs-keyword">WITH</span>[ <span class="hljs-keyword">CASCADED</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">LOCAL</span> ] <span class="hljs-keyword">CHECK</span> OPTION ]<br><br>方式二：<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> 视图名称 [（列名列表)] <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span>语句 [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> OPTION]<br></code></pre></td></tr></table></figure><p><strong>删除视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> [IF <span class="hljs-keyword">EXISTS</span>] 视图名称 [视图名称]<br></code></pre></td></tr></table></figure><p><strong>更新及作用</strong></p><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新</p><ol><li>聚合函数或窗口函数 ( SUM()、MIN()、MAX()、COUNT() 等 )</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或者UNION ALL</li></ol><blockquote><p>例子： 使用了聚合函数，插入会失败。<br><code>create view stu_v_count as select count(*) from student;</code><br><code>insert into stu_v_count values(10);</code>  </p></blockquote><p>作用:</p><p>​视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。 </p><blockquote><p>安全<br>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据<br>数据独立<br>视图可帮助用户屏蔽真实表结构变化带来的影响。  </p></blockquote><p>总而言之 类似于给表加上了一个外壳，通过这个外壳访问表的时候，<strong>只能按照所设计的方式进行访问与更新。</strong></p><h5 id="4-2存储过程"><a href="#4-2存储过程" class="headerlink" title="4.2存储过程"></a>4.2存储过程</h5><p>​存储过程是事先经过编译并存储在数据库中的一段SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。<br>​存储过程思想上很简单，<strong>就是数据库SQL 语言层面的代码封装与重用</strong>。</p><p>特点</p><ul><li>封装</li><li>复用</li><li>可以接收参数，也可以返回数据减少网络交互，效率提升</li></ul><p><strong>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名称( [参数列表] ) <br><span class="hljs-keyword">BEGIN</span><br> <span class="hljs-keyword">SQL</span> 语句 <br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>NOTE: 在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter 指定SQL语句的结束符。默认是 分号作为结束符。</p><p>delimiter $ ，则 $ 符作为结束符。</p><p><strong>调用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CALL</span> 名称 ( [参数])<br></code></pre></td></tr></table></figure><p><strong>查看</strong></p><p>查询指定数据库的存储过程及状态信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.ROUTINES <span class="hljs-keyword">WHERE</span> ROUTINE_SCHEMA <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xxx&#x27;</span> <br></code></pre></td></tr></table></figure><p>存储过程名称；–查询某个存储过程的定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span><br></code></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> [ IFEXISTS ] 存储过程名称<br></code></pre></td></tr></table></figure><p><strong>游标</strong></p><p>​游标（CURSOR）是用来<strong>存储查询结果集的数据类型</strong>，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH和CLOSE，其语法分别如下。</p><blockquote><p>声明游标：<br><code>DECLARE 游标名称 CURSOR FOR 查询语句</code></p></blockquote><blockquote><p>打开游标：<br><code>OPEN 游标名称</code></p></blockquote><blockquote><p>获取游标记录：<br><code>FETCH 游标名称INTO变量[变量]</code></p></blockquote><h5 id="4-3-触发器"><a href="#4-3-触发器" class="headerlink" title="4.3 触发器"></a>4.3 触发器</h5><p>​触发器是与表有关的数据库对象，<strong>指在insert&#x2F;update&#x2F;delete之前或之后，触发并执行触发器中定义的SQL语句集合</strong>。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。   </p><p>​使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发（比如说 一条语句影响了 5 行 则会被触发 5 次），不支持语句级触发（比如说 一条语句影响了 5 行 则会被触发 1 次）。  </p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD</th></tr></thead><tbody><tr><td>INSERT</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE</td><td>OLD表示修改之前的数据，NEW表示将要或已经修改后的数据</td></tr><tr><td>DELETE</td><td>OLD表示将要或者已经删除的数据</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JAVA核心基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA高级</title>
    <link href="/2023/04/01/Java%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/04/01/Java%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Java高级"><a href="#Java高级" class="headerlink" title="Java高级"></a>Java高级</h1><h3 id="一、多线程"><a href="#一、多线程" class="headerlink" title="一、多线程"></a>一、多线程</h3><h5 id="1-1基本概念"><a href="#1-1基本概念" class="headerlink" title="1.1基本概念"></a>1.1基本概念</h5><ul><li>程序：为完成特定任务、用某种语言编写的一组指令的集合。即指一 段静态的代码，静态对象。</li><li>进程：是程序的一次执行过程，或是正在运行的一个程序。是一个动态 的过程：有它自身的产生、存在和消亡的过程。（程序是静态的，进程是动态的）<strong>进程作为资源分配的单位</strong>，系统在运行时会为每个进程分配不同的内存区域</li><li>线程：进程可进一步细化为线程，是一个程序内部的一条执行路径。一个进程同一时间并行执行多个线程，就是支持多线程的。<strong>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)</strong></li></ul><p><strong>并行：</strong>多个CPU同时执行多个任务。比如：多个人同时做不同的事。 </p><p><strong>并发：</strong>一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</p><h5 id="1-2线程的创建和使用"><a href="#1-2线程的创建和使用" class="headerlink" title="1.2线程的创建和使用"></a>1.2线程的创建和使用</h5><p>Java语言的JVM允许程序运行多个线程，它通过<strong>java.lang.Thread</strong> 类来体现。</p><p><strong>Thread类的特性</strong>：</p><ul><li>每个线程都是通过某个特定<strong>Thread对象的run()方法来完成操作的</strong>，经常 把run()方法的主体称为线程体</li><li>通过该Thread对象的<strong>start()方法来启动这个线程</strong>，而非直接调用run()</li></ul><p><strong>API中创建线程的两种方式</strong></p><p>1）继承Thread类的方式 </p><ul><li>定义子类继承Thread类。</li><li>子类中重写Thread类中的run方法。 </li><li>创建Thread子类对象，即创建了线程对象。 </li><li>调用线程对象start方法：启动线程，调用run方法。</li></ul><p>2）实现Runnable接口的方式</p><ul><li><p>定义子类，实现Runnable接口。 </p></li><li><p>子类中重写Runnable接口中的run方法。 </p></li><li><p>通过Thread类含参构造器创建线程对象。 </p></li><li><p>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。 </p></li><li><p>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p></li></ul><p><strong>两种实现方式的区别</strong></p><ul><li>继承Thread：线程代码存放Thread子类run方法中。 </li><li>实现Runnable：线程代码存在接口的子类的run方法。</li></ul><p><strong>注意：</strong></p><p>1）如果<strong>自己手动调用run()方法，那么就只是普通方法</strong>，没有启动多线程模式。 </p><p>2）run()方法由JVM调用，什么时候调用，执行的过程控制<strong>都由操作系统的CPU 调度决定</strong>。 </p><p>3）想要启动多线程，<strong>必须调用start方法</strong>。 </p><p>4）一个线程对象<strong>只能调用一次start()方法启动</strong>，如果重复调用了，则将抛出异常“IllegalThreadStateException”。</p><p>补充：Java中的线程分为两类，<strong>守护线程</strong>和<strong>用户线程</strong></p><p>守护线程是用来服务用户线程的，通过在start()方法前调用，用户线程结束守护线程也将结束</p><h5 id="1-3-Thread类的有关方法"><a href="#1-3-Thread类的有关方法" class="headerlink" title="1.3 Thread类的有关方法"></a>1.3 Thread类的有关方法</h5><ul><li>void start(): 启动线程，并执行对象的run()方法 </li><li>run(): 线程在被调度时执行的操作 </li><li>String getName(): 返回线程的名称 </li><li>void setName(String name):设置该线程名称 </li><li>static Thread currentThread(): 返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</li><li>static void yield()：线程让步，暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程 （若队列中没有同优先级的线程，忽略此方法）</li><li>join() ：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止 （低优先级的线程也可以获得执行 ）</li><li>static void sleep(long millis)：(指定时间:毫秒) 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队。 抛出InterruptedException异常</li></ul><h5 id="1-4线程的生命周期"><a href="#1-4线程的生命周期" class="headerlink" title="1.4线程的生命周期"></a>1.4线程的生命周期</h5><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230401140518113.png" class title="image-20230401140518113"><ul><li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态 </li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已 具备了运行的条件，只是没分配到CPU资源 </li><li>运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线 程的操作和功能 </li><li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中 止自己的执行，进入阻塞状态 </li><li>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ul><h5 id="1-5-线程的同步"><a href="#1-5-线程的同步" class="headerlink" title="1.5 线程的同步"></a>1.5 线程的同步</h5><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230401140449232.png" class title="image-20230401140449232"><p><strong>线程安全问题</strong></p><p>​当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有 执行完，另一个线程参与进来执行。导致共享数据的错误。</p><h6 id="1-5-1Synchronized"><a href="#1-5-1Synchronized" class="headerlink" title="1.5.1Synchronized"></a>1.5.1Synchronized</h6><p>当我们想要保证一个共享资源在<strong>同一时间只会被一个线程访问到时</strong>，我们可以在代码中使用<code>synchronized</code>关键字对类或者对象加锁。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">同步代码块<br><span class="hljs-built_in">synchronized</span> (对象)&#123;<br><span class="hljs-comment">// 需要被同步的代码；</span><br>&#125;<br>同步方法<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span> <span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>&#123; <br>….<br>&#125;<br></code></pre></td></tr></table></figure><p>必须确保使用同一个资源的多个线程共用一把锁，</p><h6 id="1-5-2-死锁"><a href="#1-5-2-死锁" class="headerlink" title="1.5.2 死锁"></a>1.5.2 死锁</h6><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃 自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于 阻塞状态，无法继续</li></ul><h6 id="1-5-3Lock"><a href="#1-5-3Lock" class="headerlink" title="1.5.3Lock"></a>1.5.3Lock</h6><p>​java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的 工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象 加锁，线程开始访问共享资源之前应先获得Lock对象。</p><p>​ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，<strong>比较常用的是ReentrantLock，可以 显式加锁、释放锁。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReenTrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br>lock.lock();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//保证线程安全的代码;</span><br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>lock.unlock(); <br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果同步代码有异常，要将unlock()写入finally语句块</strong></p><h6 id="1-5-4synchronized与Lock对比"><a href="#1-5-4synchronized与Lock对比" class="headerlink" title="1.5.4synchronized与Lock对比"></a>1.5.4synchronized与Lock对比</h6><ul><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是 隐式锁，出了作用域自动释放 </li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁 </li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有 更好的扩展性（提供更多的子类）</li></ul><h5 id="1-6-线程的通信"><a href="#1-6-线程的通信" class="headerlink" title="1.6 线程的通信"></a>1.6 线程的通信</h5><p> <strong>wait() 与 notify() 和 notifyAll()</strong></p><ul><li>wait()：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当 前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有 权后才能继续执行。</li><li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待 </li><li>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待</li></ul><p>这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报 java.lang.IllegalMonitorStateException异常。</p><h3 id="二、Java常用类"><a href="#二、Java常用类" class="headerlink" title="二、Java常用类"></a>二、Java常用类</h3><h5 id="2-1-字符串相关的类"><a href="#2-1-字符串相关的类" class="headerlink" title="2.1 字符串相关的类"></a>2.1 字符串相关的类</h5><p><strong>String类</strong></p><ul><li>int length()：返回字符串的长度： return value.length </li><li>char charAt(int index)： 返回某索引处的字符return value[index] </li><li>boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0 </li><li>String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写  String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写 </li><li>String trim()：返回字符串的副本，忽略前导空白和尾部空白  boolean equals(Object obj)：比较字符串的内容是否相同 </li><li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大 小写  String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+” </li><li>int compareTo(String anotherString)：比较两个字符串的大小 </li><li>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从 beginIndex开始截取到最后的一个子字符串。 </li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字 符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li><li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束 </li><li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始 </li><li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的 子字符串是否以指定前缀开始</li><li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列 时，返回 true  int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引 </li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出 现处的索引，从指定的索引开始 </li><li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引 </li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后 一次出现处的索引，从指定的索引开始反向搜索 注：indexOf和lastIndexOf方法如果未找到都是返回-1</li><li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是 通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 </li><li>String replace(CharSequence target, CharSequence replacement)：使 用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 </li><li>String replaceAll(String regex, String replacement) ： 使 用 给 定 的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 </li><li>String replaceFirst(String regex, String replacement) ： 使 用 给 定 的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。 </li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此 字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ul><p><strong>StringBuffer类</strong>不同于String，其对象必须使用构造器生成。有三个构造器： </p><ul><li><p>StringBuffer()：初始容量为16的字符串缓冲区 </p></li><li><p>StringBuffer(int size)：构造指定容量的字符串缓冲区 </p></li><li><p>StringBuffer(String str)：将内容初始化为指定字符串内容</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接 <br>StringBuffer <span class="hljs-keyword">delete</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">start</span>,<span class="hljs-type">int</span> <span class="hljs-keyword">end</span>)：删除指定位置的内容 <br>StringBuffer replace(<span class="hljs-type">int</span> <span class="hljs-keyword">start</span>, <span class="hljs-type">int</span> <span class="hljs-keyword">end</span>, String str)：把[<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>)位置替换为str StringBuffer <span class="hljs-keyword">insert</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">offset</span>, xxx)：在指定位置插入xxx StringBuffer reverse() ：把当前字符序列逆转<br></code></pre></td></tr></table></figure><p><strong>StringBuilder</strong> 和 StringBuffer 非常类似，均代表可变的字符序列，而且 提供相关功能的方法也一样</p><p><strong>对比String、StringBuffer、StringBuilder</strong></p><ul><li>String(JDK1.0)：不可变字符序列 </li><li>StringBuffer(JDK1.0)：可变字符序列、效率低、线程安全 </li><li>StringBuilder(JDK 5.0)：可变字符序列、效率高、线程不安全</li></ul><h5 id="2-2-时间日期API"><a href="#2-2-时间日期API" class="headerlink" title="2.2 时间日期API"></a>2.2 时间日期API</h5><p>​LocalDate、LocalTime、LocalDateTime 类是其中较重要的几个类，它们的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。 它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区 相关的信息。 </p><ul><li>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。 </li><li>LocalTime表示一个时间，而不是日期。 </li><li>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</li></ul><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230401152953369.png" class title="image-20230401152953369"><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230401153119117.png" class title="image-20230401153119117"><h5 id="2-3-Java比较器"><a href="#2-3-Java比较器" class="headerlink" title="2.3 Java比较器"></a>2.3 Java比较器</h5><p> Java实现对象排序的方式有两种： </p><p>1）自然排序：java.lang.Comparable</p><ul><li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称 为类的自然排序。 </li><li>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即 通过 compareTo(Object obj) 方法的返回值来比较大小。如果当前对象this大 于形参对象obj，则返回正整数，如果当前对象this小于形参对象obj，则返回 负整数，如果当前对象this等于形参对象obj，则返回零。 </li><li>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或 Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有 序集合中的元素，无需指定比较器。 </li><li>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) &#x3D;&#x3D; 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals  一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。</li></ul><p>2）定制排序：java.util.Comparator</p><ul><li>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码， 或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那 么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排 序的比较。 </li><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返 回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示 o1小于o2。 </li><li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort）， 从而允许在排序顺序上实现精确控制。 </li><li>还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的 顺序，或者为那些没有自然顺序的对象 collection 提供排序。</li></ul><h5 id="2-4-System类"><a href="#2-4-System类" class="headerlink" title="2.4 System类"></a>2.4 System类</h5><p>​System类代表系统，<strong>系统级的很多属性和控制方法</strong>都放置在该类的内部。 该类位于java.lang包。System类内部包含in、out和err三个成员变量，分别代表标准输入流 (键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</p><ul><li>native long currentTimeMillis()： 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时 间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。 </li><li>void exit(int status)： 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表 异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。 9.5 System类 </li><li>void gc()： 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况。 </li><li>String getProperty(String key)： 该方法的作用是获得系统中属性名为key的属性对应的值</li></ul><h5 id="2-5-Math类"><a href="#2-5-Math类" class="headerlink" title="2.5 Math类"></a>2.5 Math类</h5><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回 值类型一般为double型。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">abs</span> 绝对值<br><span class="hljs-built_in">acos</span>,<span class="hljs-built_in">asin</span>,<span class="hljs-built_in">atan</span>,<span class="hljs-built_in">cos</span>,<span class="hljs-built_in">sin</span>,<span class="hljs-built_in">tan</span> 三角函数<br><span class="hljs-built_in">sqrt</span> 平方根<br><span class="hljs-built_in">pow</span>(<span class="hljs-type">double</span> a,doble b) a的b次幂<br><span class="hljs-built_in">log</span> 自然对数<br><span class="hljs-built_in">exp</span> e为底指数<br><span class="hljs-built_in">max</span>(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)<br><span class="hljs-built_in">min</span>(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)<br><span class="hljs-built_in">random</span>() 返回<span class="hljs-number">0.0</span>到<span class="hljs-number">1.0</span>的随机数<br><span class="hljs-type">long</span> <span class="hljs-built_in">round</span>(<span class="hljs-type">double</span> a) <span class="hljs-type">double</span>型数据a转换为<span class="hljs-type">long</span>型（四舍五入）<br><span class="hljs-title function_">toDegrees</span>(<span class="hljs-type">double</span> angrad) 弧度—&gt;角度<br><span class="hljs-title function_">toRadians</span>(<span class="hljs-type">double</span> angdeg) 角度—&gt;弧度<br></code></pre></td></tr></table></figure><h3 id="三、枚举类与注解"><a href="#三、枚举类与注解" class="headerlink" title="三、枚举类与注解"></a>三、枚举类与注解</h3><h5 id="3-1-枚举类的使用"><a href="#3-1-枚举类的使用" class="headerlink" title="3.1 枚举类的使用"></a>3.1 枚举类的使用</h5><p>枚举类：类的对象只有有限个，确定的。当需要定义一组常量时，强烈建议使用枚举类</p><p>枚举类对象的属性不应允许被改动, 所以应该使用 <strong>private final</strong> 修饰</p><h6 id="3-1-1如何自定义枚举类"><a href="#3-1-1如何自定义枚举类" class="headerlink" title="3.1.1如何自定义枚举类"></a>3.1.1如何自定义枚举类</h6><ol><li>私有化类的构造器，保证不能在类的外部创建其对象 </li><li>在类的内部创建枚举类的实例。声明为：public static final  </li><li>对象如果有实例变量，应该声明为private final，并在构造器中初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONNAME;<span class="hljs-comment">//季节的名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONDESC;<span class="hljs-comment">//季节的描述</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String seasonName,String seasonDesc)</span>&#123;<br>    <span class="hljs-built_in">this</span>.SEASONNAME = seasonName;<br>    <span class="hljs-built_in">this</span>.SEASONDESC = seasonDesc;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;春暖花开&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;白雪皑皑&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-2如何使用关键字enum定义枚举类"><a href="#3-1-2如何使用关键字enum定义枚举类" class="headerlink" title="3.1.2如何使用关键字enum定义枚举类"></a>3.1.2如何使用关键字enum定义枚举类</h6><p>使用 enum 定义的枚举类默认继承了 java.lang.Enum类，因此不能再 继承其他类</p><p><strong>必须在枚举类的第一行声明枚举类对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SeasonEnum</span> &#123;<br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春风又绿江南岸&quot;</span>),<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;映日荷花别样红&quot;</span>),<br>    AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋水共长天一色&quot;</span>),<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;窗含西岭千秋雪&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">SeasonEnum</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.seasonName = seasonName;<br>        <span class="hljs-built_in">this</span>.seasonDesc = seasonDesc;<br>&#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonDesc</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> seasonDesc;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-3Enum类的主要方法"><a href="#3-1-3Enum类的主要方法" class="headerlink" title="3.1.3Enum类的主要方法"></a>3.1.3Enum类的主要方法</h6><ul><li>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的 枚举值。 </li><li>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符 串必须是枚举类对象的“名字”。如不是，会有运行时异常： IllegalArgumentException。 </li><li>toString()：返回当前枚举类对象常量的名称</li></ul><h6 id="3-1-4实现接口的枚举类"><a href="#3-1-4实现接口的枚举类" class="headerlink" title="3.1.4实现接口的枚举类"></a>3.1.4实现接口的枚举类</h6><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只 要统一实现该方法即可。</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,  则可以让每个枚举值分别来实现该方法</li></ul><h5 id="3-2-注解"><a href="#3-2-注解" class="headerlink" title="3.2 注解"></a>3.2 注解</h5><h6 id="3-2-1-注解-Annotation-概述"><a href="#3-2-1-注解-Annotation-概述" class="headerlink" title="3.2.1 注解(Annotation)概述"></a>3.2.1 注解(Annotation)概述</h6><p>​Annotation 其实就是代码里的<strong>特殊标记</strong>, 这些标记可以在编译, 类加 载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员 可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</p><p>​使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成 一个修饰符使用。用于修饰它支持的程序元素</p><p><strong>常见注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.annotation.javadoc;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span> shkstart</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@see</span> Math.java</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavadocTest</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 程序的主方法，程序的入口</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> args String[] 命令行参数</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 求圆面积的方法</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> radius double 半径值</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@return</span> double 圆的面积</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br>&#125;<br><span class="hljs-meta">@author</span> 标明开发该类模块的作者，多个作者之间使用,分割<br><span class="hljs-meta">@version</span> 标明该类模块的版本<br><span class="hljs-meta">@see</span> 参考转向，也就是相关主题<br><span class="hljs-meta">@since</span> 从哪个版本开始增加的<br><span class="hljs-meta">@param</span> 对方法中某参数的说明，如果没有参数就不能写<br><span class="hljs-meta">@return</span> 对方法返回值的说明，如果方法的返回值类型是<span class="hljs-keyword">void</span>就不能写<br><span class="hljs-meta">@exception</span> 对方法可能抛出的异常进行说明 ，如果方法没有用<span class="hljs-keyword">throws</span>显式抛出的异常就不能写其中<br></code></pre></td></tr></table></figure><h6 id="3-2-1利用反射获取注解信息"><a href="#3-2-1利用反射获取注解信息" class="headerlink" title="3.2.1利用反射获取注解信息"></a>3.2.1利用反射获取注解信息</h6><p>​当一个 Annotation 类型被定义为运行时 Annotation 后, 该注解才是运行时 可见, 当 class 文件被载入时保存在 class 文件中的 Annotation 才会被虚拟 机读取。程序可以调用 AnnotatedElement对象的如下方法来访问 Annotation 信息</p><p><strong>反射</strong></p><p>​反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法,对于任意一个对象，都能够调用它的任意方法和属性,这种<strong>动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</strong></p><p><strong>一句话总结：反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p><h3 id="四、Java集合"><a href="#四、Java集合" class="headerlink" title="四、Java集合"></a>四、Java集合</h3><h5 id="4-1-集合框架概述"><a href="#4-1-集合框架概述" class="headerlink" title="4.1 集合框架概述"></a>4.1 集合框架概述</h5><p>Java 集合可分为 Collection 和 Map 两种体系</p><p>1）Collection接口：单列数据，定义了存取一组对象的方法的集合 </p><ul><li>List：元素有序、可重复的集合  </li><li>Set：元素无序、不可重复的集合</li></ul><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230401164120130.png" class title="image-20230401164120130"><p>2） Map接口：双列数据，保存具有映射关系“key-value对”的集合</p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230401164152209.png" class title="image-20230401164152209"><h5 id="4-2-Collection接口"><a href="#4-2-Collection接口" class="headerlink" title="4.2 Collection接口"></a>4.2 Collection接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、添加<br>add(Object obj)<br>addAll(Collection coll)<br><span class="hljs-number">2</span>、获取有效元素的个数<br><span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span><br><span class="hljs-number">3</span>、清空集合<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span><br><span class="hljs-number">4</span>、是否是空集合<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span><br><span class="hljs-number">5</span>、是否包含某个元素<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object obj)</span>：是通过元素的equals方法来判断是否是同一个对象<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsAll</span><span class="hljs-params">(Collection c)</span>：也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。<br><span class="hljs-number">6</span>、删除<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object obj)</span> ：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeAll</span><span class="hljs-params">(Collection coll)</span>：取当前集合的差集<br><span class="hljs-number">7</span>、取两个集合的交集<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">retainAll</span><span class="hljs-params">(Collection c)</span>：把交集的结果存在当前集合中，不<br>影响c<br><span class="hljs-number">8</span>、集合是否相等<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br><span class="hljs-number">9</span>、转成对象数组<br>Object[] toArray()<br><span class="hljs-number">10</span>、获取集合对象的哈希值<br>hashCode()<br><span class="hljs-number">11</span>、遍历<br>iterator()：返回迭代器对象，用于集合遍历<br></code></pre></td></tr></table></figure><p>Iterator<strong>迭代器接口</strong></p><p>​Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元 素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。</p><p>​Iterator <strong>仅用于遍历集合</strong>，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</p><p>​集合对象每次调用iterator()方法都得到一个<strong>全新的迭代器对象</strong>，默认游标都在集合 的第一个元素之前。</p><p>比如：使用 foreach 循环遍历集合元素，<strong>遍历集合的底层调用Iterator完成操作</strong>。</p><h6 id="4-2-1-List接口"><a href="#4-2-1-List接口" class="headerlink" title="4.2.1 List接口"></a>4.2.1 List接口</h6><p>​List集合类中<strong>元素有序、且可重复</strong>，集合中的每个元素都有其对应的顺序索引。List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来 操作集合元素的方法。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> <span class="hljs-keyword">add</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>, <span class="hljs-keyword">Object</span> ele):在<span class="hljs-keyword">index</span>位置插入ele元素<br><span class="hljs-keyword">Object</span> <span class="hljs-keyword">get</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>):获取指定<span class="hljs-keyword">index</span>位置的元素<br><span class="hljs-keyword">Object</span> remove(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>):移除指定<span class="hljs-keyword">index</span>位置的元素，并返回此元素<br><span class="hljs-keyword">Object</span> <span class="hljs-keyword">set</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>, <span class="hljs-keyword">Object</span> ele):设置指定<span class="hljs-keyword">index</span>位置的元素为ele<br><span class="hljs-type">boolean</span> addAll(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>, Collection eles):从<span class="hljs-keyword">index</span>位置开始将eles中的所有元素添加进来<br><span class="hljs-type">int</span> indexOf(<span class="hljs-keyword">Object</span> obj):返回obj在集合中首次出现的位置<br></code></pre></td></tr></table></figure><h6 id="4-2-2List实现类"><a href="#4-2-2List实现类" class="headerlink" title="4.2.2List实现类"></a>4.2.2List实现类</h6><p>1）<strong>ArrayList</strong>（变长数组）</p><p>​本质上，ArrayList是对象引用的一个”变长”数组</p><ul><li>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组 </li><li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元 素时再创建一个始容量为10的数组</li></ul><p>2）<strong>LinkedList</strong>（双向链表）</p><p>​对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高</p><p>3）<strong>Vector</strong></p><p>​Vector 是一个古老的集合，JDK1.0就有了。大多数操作<strong>与ArrayList 相同</strong>，区别之处在于<strong>Vector是线程安全的。</strong></p><p>​Vector总是比ArrayList慢，所以尽量避免使用。</p><p><strong>面试题</strong></p><p>请问ArrayList&#x2F;LinkedList&#x2F;Vector的异同？谈谈你的理解？ArrayList底层 是什么？扩容机制？Vector和ArrayList的最大区别?</p><p>​ArrayList和LinkedList的异同 二者都线程不安全，相对线程安全的Vector，执行效率高。 此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。对于 随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。对于新增 和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p><p>​ArrayList和Vector的区别 Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于 强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下,大多数的Java程序员使用 ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。<strong>Vector每次扩容请求其大 小的2倍空间，而ArrayList是1.5倍</strong>。Vector还有一个子类Stack。</p><h6 id="4-2-3Set接口"><a href="#4-2-3Set接口" class="headerlink" title="4.2.3Set接口"></a>4.2.3Set接口</h6><p>​Set 集合<strong>不允许包含相同的元素</strong>，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。Set 判断两个对象是否相同不是使用 &#x3D;&#x3D; 运算符，<strong>而是根据 equals() 方法</strong></p><h6 id="4-2-4Set实现类"><a href="#4-2-4Set实现类" class="headerlink" title="4.2.4Set实现类"></a>4.2.4Set实现类</h6><p><strong>HashSet</strong> </p><p>​HashSet是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除 性能。</p><p><strong>特点：</strong></p><ul><li>不能保证元素的排列顺序</li><li>HashSet 不是线程安全的</li><li>集合元素可以是 null</li></ul><p>​HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。 对于存放在Set容器中的对象，对应的类一<strong>定要重写equals()和hashCode(Object  obj)方法，</strong>以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</p><p>解释：根据一个类的equals方法（改写后），<strong>两个截然不 同的实例有可能在逻辑上是相等的</strong>，但是，根据Object.hashCode()方法， 它们仅仅是两个对象。</p><p><strong>添加过程：</strong></p><p>​当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法 来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象 在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算<strong>得到在数组中的下标</strong>，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布， 该散列函数设计的越好）</p><p>​如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了， 那么会通过链表的方式继续链接。如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相 等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230401173358873.png" class title="image-20230401173358873"><p>​底层也是数组，初始容量为16，当如果使用率<strong>超过0.75</strong>，（16*0.75&#x3D;12） 就会扩大容量为原来的2倍。（16扩容为32，依次为64,128….等）</p><p><strong>LinkedHashSet</strong></p><p>​LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置， 但它同时使用双向链表维护元素的次序，这使得元素看起来是<strong>以插入顺序保存</strong>的。LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全 部元素时有很好的性能。LinkedHashSet <strong>不允许集合元素重复。</strong></p><p>LinkedHashSet底层结构</p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402142938961.png" class title="image-20230402142938961"><p><strong>TreeSet</strong></p><p>​TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。TreeSet底层使用<strong>红黑树结构</strong>存储数据</p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402143137439.png" class title="image-20230402143137439"><p>TreeSet 两种排序方法：</p><ul><li>自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元 素之间的大小关系，然后将集合元素按升序(默认情况)排列。如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable  接口。（实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。）</li><li>定制排序：要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表 示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li></ul><h5 id="4-3-Map接口"><a href="#4-3-Map接口" class="headerlink" title="4.3 Map接口"></a>4.3 Map接口</h5><ul><li>Map与Collection并列存在。用于保存具有<strong>映射关系</strong>的数据:key-value </li><li>Map 中的 key 和 value 都可以是任何引用类型的数据 </li><li>Map 中的 <strong>key 用Set来存放，不允许重复，</strong>即同一个 Map 对象所对应 的类，须重写hashCode()和equals()方法 </li><li>常用String类作为Map的“键” </li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到 唯一的、确定的 value </li><li>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和 Properties。其中，<strong>HashMap是 Map 接口使用频率最高的实现类</strong></li></ul><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402143922876.png" class title="image-20230402143922876"><p><strong>常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">添加、删除、修改操作：<br>Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key,Object value)</span>：将指定key-value添加到(或修改)当前map对象中<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">putAll</span><span class="hljs-params">(Map m)</span>:将m中的所有key-value对存放到当前map中<br>Object <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span>：移除指定key的key-value对，并返回value<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>：清空当前map中的所有数据<br>元素查询的操作：<br>Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span>：获取指定key对应的value<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsKey</span><span class="hljs-params">(Object key)</span>：是否包含指定的key<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsValue</span><span class="hljs-params">(Object value)</span>：是否包含指定的value<br><span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>：返回map中key-value对的个数<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>：判断当前map是否为空<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>：判断当前map和参数对象obj是否相等<br><br></code></pre></td></tr></table></figure><h6 id="4-3-1HashMap"><a href="#4-3-1HashMap" class="headerlink" title="4.3.1HashMap"></a>4.3.1HashMap</h6><ul><li><strong>允许使用null键和null值</strong>，与HashSet一样，不保证映射的顺序。 </li><li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写： equals()和hashCode() </li><li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类 要重写：equals() </li><li>一个key-value构成一个entry </li><li>所有的entry构成的集合是Set:无序的、不可重复的 </li><li>HashMap <strong>判断两个 key 相等的标准是</strong>：两个 key 通过 equals() 方法返回 true， hashCode 值也相等。 </li><li>HashMap <strong>判断两个 value相等的标准是</strong>：两个 value 通过 equals() 方法返回 true。</li></ul><p><strong>HashMap的存储结构</strong></p><ul><li>JDK 7及以前版本：HashMap是数组+链表结构(即为链地址法)</li></ul><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402144807695.png" class title="image-20230402144807695"><ul><li>JDK 8版本发布以后：HashMap是数组+链表+红黑树实现。</li></ul><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402144827341.png" class title="image-20230402144827341"><p><strong>JDK1.8相较于之前的变化：</strong></p><p>1.HashMap map &#x3D; new HashMap();&#x2F;&#x2F;默认情况下，先不创建长度为16的数组</p><p>2.当首次调用map.put()时，再创建<strong>长度为16的数组</strong></p><p>3.数组为Node类型，在jdk7中称为Entry类型 </p><p>4.形成链表结构时，新添加的key-value对在链表的尾部（七上八下）</p><p>5.当数组指定索引位置的链表长度&gt;8时，<strong>且</strong>map中的数组的长度&gt; 64时，此索引位置 上的所有key-value对使用红黑树进行存储。（如果达到了8个，此时如果capacity没有 达到64，那么HashMap<strong>会先扩容解决</strong>）</p><p><strong>不要修改映射关系的key</strong></p><p>​映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算 每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关 系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</p><h6 id="4-3-2LinkedHashMap"><a href="#4-3-2LinkedHashMap" class="headerlink" title="4.3.2LinkedHashMap"></a>4.3.2LinkedHashMap</h6><p>​在HashMap存储结构的基础上，使用了一对双向链表来记录添加 元素的顺序与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代 顺序：迭代顺序与 Key-Value 对的插入顺序一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap中的内部类：Node<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>    <span class="hljs-keyword">final</span> K key;<br>    V value;<br>    Node&lt;K,V&gt; next;<br>&#125;<br>LinkedHashMap中的内部类：Entry<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>.Node&lt;K,V&gt; &#123;<br>    Entry&lt;K,V&gt; before, after;<br>    Entry(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-built_in">super</span>(hash, key, value, next);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-3-3TreeMap"><a href="#4-3-3TreeMap" class="headerlink" title="4.3.3TreeMap"></a>4.3.3TreeMap</h6><p>​TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。 <strong>TreeMap 可以保证所有的 Key-Value 对处于有序状态</strong>。TreeSet底层使用<strong>红黑树结构存储数据</strong>。TreeMap判断两个key相等的标准：两个key通过compareTo()方法或 者compare()方法返回0。</p><p>​TreeMap 的 Key 的排序： </p><ul><li><p>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有 的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException </p></li><li><p>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</p></li></ul><h6 id="4-3-4Hashtable"><a href="#4-3-4Hashtable" class="headerlink" title="4.3.4Hashtable"></a>4.3.4Hashtable</h6><p>​<strong>不同于HashMap， Hashtable是线程安全的。</strong>Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询速度快，很多情况下可以互用。与HashMap不同，Hashtable <strong>不允许使用 null 作为 key 和 value</strong>，也<strong>不能保证其中 Key-Value 对的顺序</strong></p><p>4.3.5Properties</p><p>​Properties 类是 Hashtable 的子类，该对象用于处理属性文件。存取数据时，建议使用setProperty(String key,String value)方法和 getProperty(String key)方法。<strong>Properties 里的 key  和 value 都是字符串类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pros.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc.properties&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>System.out.println(user);<br></code></pre></td></tr></table></figure><h3 id="五、泛型"><a href="#五、泛型" class="headerlink" title="五、泛型"></a>五、泛型</h3><h5 id="5-1-泛型概述"><a href="#5-1-泛型概述" class="headerlink" title="5.1 泛型概述"></a>5.1 泛型概述</h5><p>​所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。<strong>这个类型参数将在使用时（</strong>例如， 继承或实现这个接口，用这个类型声明变量、创建对象时）<strong>确定（</strong>即传入实 际的类型参数，也称为类型实参）。</p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402151214175.png" class title="image-20230402151214175"><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402151226631.png" class title="image-20230402151226631"><p><strong>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生 ClassCastException异常。</strong></p><h5 id="5-2-泛型的使用"><a href="#5-2-泛型的使用" class="headerlink" title="5.2 泛型的使用"></a>5.2 泛型的使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br>map.put(<span class="hljs-string">&quot;Tom1&quot;</span>,<span class="hljs-number">34</span>);<br>map.put(<span class="hljs-string">&quot;Tom2&quot;</span>,<span class="hljs-number">44</span>);<br>map.put(<span class="hljs-string">&quot;Tom3&quot;</span>,<span class="hljs-number">33</span>);<br>map.put(<span class="hljs-string">&quot;Tom4&quot;</span>,<span class="hljs-number">32</span>);<br><span class="hljs-comment">//添加失败</span><br><span class="hljs-comment">//map.put(33, &quot;Tom&quot;);</span><br>Set&lt;Entry&lt;String,Integer&gt;&gt; entrySet = map.entrySet();<br>Iterator&lt;Entry&lt;String,Integer&gt;&gt; iterator = entrySet.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>    Entry&lt;String,Integer&gt; entry = iterator.next();<br>    System.out.println(entry.getKey() + <span class="hljs-string">&quot;---&gt;&quot;</span> + entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>泛型的声明：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">List</span> 和 <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenTest</span>&lt;K, V&gt;<br>其中，T,K,V不代表值，而是表示类型。这里使用任意字母都可以。常用T表示，是Type的缩写。<br></code></pre></td></tr></table></figure><p><strong>泛型的实例化：</strong></p><p>一定要在类名后面指定类型参数的值（类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>Iterator&lt;Customer&gt; iterator = customers.iterator();<br></code></pre></td></tr></table></figure><p>List strList &#x3D; new ArrayList(); Iterator iterator &#x3D; customers.iterator();</p><p><strong>把一个集合中的内容限制为一个特定的数据类型，这就是generics背后的核心思想</strong></p><p><strong>泛型方法</strong></p><p>​方法，也可以被泛型化，不管此时定义在其中的类是不是泛型类。在泛型 方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">[访问权限] &lt;泛型&gt; 返回类型 方法名([泛型标识 参数名称]) 抛出的异常<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DAO</span> &#123;<br>    <span class="hljs-keyword">public</span> &lt;E&gt; E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> id, E e)</span> &#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、IO流"><a href="#六、IO流" class="headerlink" title="六、IO流"></a>六、IO流</h3><h5 id="6-1-File类"><a href="#6-1-File类" class="headerlink" title="6.1 File类"></a>6.1 File类</h5><p>​文件和文件目录路径的抽象表示形式，File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。 如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。<strong>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对 象，</strong>但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。File对象可以作为参数传递给流的构造器</p><p>​路径中的每级目录之间用一个路径分隔符隔开。（windows和DOS系统默认使用<strong>“\”</strong>来表示 、 UNIX和URL使用<strong>“&#x2F;”</strong>来表示）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String separator。根据操作系统，动态的提供分隔符。<br><span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\atguigu\\info.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:&quot;</span> + File.separator + <span class="hljs-string">&quot;atguigu&quot;</span> + File.separator + <span class="hljs-string">&quot;info.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/atguigu&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAbsolutePath</span><span class="hljs-params">()</span>：获取绝对路径<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPath</span><span class="hljs-params">()</span> ：获取路径<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> ：获取名称<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParent</span><span class="hljs-params">()</span>：获取上层文件目录路径。若无，返回<span class="hljs-literal">null</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> ：获取文件长度（即：字节数）。不能获取目录的长度。<br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">lastModified</span><span class="hljs-params">()</span> ：获取最后一次的修改时间，毫秒值<br><span class="hljs-keyword">public</span> String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组<br><span class="hljs-keyword">public</span> File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDirectory</span><span class="hljs-params">()</span>：判断是否是文件目录<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFile</span><span class="hljs-params">()</span> ：判断是否是文件<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exists</span><span class="hljs-params">()</span> ：判断是否存在<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">()</span> ：判断是否可读<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">()</span> ：判断是否可写<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHidden</span><span class="hljs-params">()</span> ：判断是否隐藏<br></code></pre></td></tr></table></figure><h5 id="6-2-IO流原理及流的分类"><a href="#6-2-IO流原理及流的分类" class="headerlink" title="6.2 IO流原理及流的分类"></a>6.2 IO流原理及流的分类</h5><p>​I&#x2F;O技术是非常实用的技术，用于 <strong>处理设备之间的数据传输</strong>。Java程序中，对于数据的输入&#x2F;输出操作以“**流(stream)**” 的 方式进行。</p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402160907188.png" class title="image-20230402160907188"><p><strong>流的分类</strong></p><ul><li><p>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit) </p></li><li><p>按数据流的流向不同分为：输入流，输出流</p></li></ul><p><strong>输入流</strong></p><ul><li>InputStream（典型实现：FileInputStream）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span><br>从输入流中读取数据的下一个字节。返回 <span class="hljs-number">0</span> 到 <span class="hljs-number">255</span> 范围内的 <span class="hljs-type">int</span> 字节值。如果因<br>为已经到达流末尾而没有可用的字节，则返回值 -<span class="hljs-number">1</span>。<br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span><br>从此输入流中将最多 b.length 个字节的数据读入一个 <span class="hljs-type">byte</span> 数组中。如果因为已<br>经到达流末尾而没有可用的字节，则返回值 -<span class="hljs-number">1</span>。否则以整数形式返回实际读取<br>的字节数。<br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off,<span class="hljs-type">int</span> len)</span><br>将输入流中最多 len 个数据字节读入 <span class="hljs-type">byte</span> 数组。尝试读取 len 个字节，但读取<br>的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于<br>文件末尾而没有可用的字节，则返回值 -<span class="hljs-number">1</span>。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>关闭此输入流并释放与该流关联的所有系统资源。<br></code></pre></td></tr></table></figure><ul><li>Reader（典型实现：FileReader）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span><br>读取单个字符。作为整数读取的字符，范围在 <span class="hljs-number">0</span> 到 <span class="hljs-number">65535</span> 之间 (<span class="hljs-number">0x00</span>-<span class="hljs-number">0xffff</span>)（<span class="hljs-number">2</span>个<br>字节的Unicode码），如果已到达流的末尾，则返回 -<span class="hljs-number">1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">char</span>[] cbuf)</span><br>将字符读入数组。如果已到达流的末尾，则返回 -<span class="hljs-number">1</span>。否则返回本次读取的字符数。<br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">char</span>[] cbuf,<span class="hljs-type">int</span> off,<span class="hljs-type">int</span> len)</span><br>将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字<br>符。如果已到达流的末尾，则返回 -<span class="hljs-number">1</span>。否则返回本次读取的字符数。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>关闭此输入流并释放与该流关联的所有系统资源。<br></code></pre></td></tr></table></figure><p><strong>输出流</strong></p><ul><li>OutputStream</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span><br>OutputStream<br>将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写<br>入的字节是参数 b 的八个低位。b 的 <span class="hljs-number">24</span> 个高位将被忽略。 即写入<span class="hljs-number">0</span>~<span class="hljs-number">255</span>范围的。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span><br>将 b.length 个字节从指定的 <span class="hljs-type">byte</span> 数组写入此输出流。write(b) 的常规协定是：应该<br>与调用 write(b, <span class="hljs-number">0</span>, b.length) 的效果完全相同。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b,<span class="hljs-type">int</span> off,<span class="hljs-type">int</span> len)</span><br>将指定 <span class="hljs-type">byte</span> 数组中从偏移量 off 开始的 len 个字节写入此输出流。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> IOException<br>刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立<br>即写入它们预期的目标。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>关闭此输出流并释放与该流关联的所有系统资源。<br></code></pre></td></tr></table></figure><ul><li>Writer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span><br>写入单个字符。要写入的字符包含在给定整数值的 <span class="hljs-number">16</span> 个低位中，<span class="hljs-number">16</span> 高位被忽略。 即<br>写入<span class="hljs-number">0</span> 到 <span class="hljs-number">65535</span> 之间的Unicode码。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span>[] cbuf)</span><br>写入字符数组。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">char</span>[] cbuf,<span class="hljs-type">int</span> off,<span class="hljs-type">int</span> len)</span><br>写入字符数组的某一部分。从off开始，写入len个字符<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(String str)</span><br>写入字符串。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(String str,<span class="hljs-type">int</span> off,<span class="hljs-type">int</span> len)</span><br>写入字符串的某一部分。<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">()</span><br>刷新该流的缓冲，则立即将它们写入预期目标。<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<br>关闭此输出流并释放与该流关联的所有系统资源。<br></code></pre></td></tr></table></figure><h3 id="七、网络编程"><a href="#七、网络编程" class="headerlink" title="七、网络编程"></a>七、网络编程</h3><h5 id="7-1-网络编程概述"><a href="#7-1-网络编程概述" class="headerlink" title="7.1 网络编程概述"></a>7.1 网络编程概述</h5><p>​Java是 Internet 上的语言，它从语言级上提供了对网络应用程 序的支持，程序员能够很容易开发常见的网络应用程序。Java提供的网络类库，可以实现无痛的网络连接，联网的底层 细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并 且 Java 实现了一个跨平台的网络库，<strong>程序员面对的是一个统一 的网络编程环境</strong></p><p><strong>网络编程的目的：</strong>直接或间接地通过网络协议与其它计算机实现数据交换，进行通讯。</p><p><strong>网络编程中有两个主要的问题：</strong></p><ul><li>如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</li><li>找到主机后如何可靠高效地进行数据传输</li></ul><p><strong>实现网络中的主机互相通信需要 IP（唯一的标识 Internet 上的计算机（通信实体）） 、 端口号（标识正在计算机上运行的进程（程序））</strong>，并遵守网络协议如<strong>OSI参考模型：</strong>模型过于理想化，未能在因特网上进行广泛推广 <strong>TCP&#x2F;IP参考模型(或TCP&#x2F;IP协议)：</strong>事实上的国际标准。</p><p><strong>端口号与IP地址的组合得出一个网络套接字：Socket。（网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标 识符套接字。）</strong></p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402165210859.png" class title="image-20230402165210859"><p><strong>网络通信协议</strong></p><ul><li><p>TCP协议：</p></li><li><p>使用TCP协议前，须先建立TCP连接，形成传输数据通道 </p></li><li><p>传输前，采用“<strong>三次握手</strong>”方式，点对点通信，<strong>是可靠的</strong> </p></li><li><p>TCP协议进行通信的两个应用进程：客户端、服务端。 </p></li><li><p>在连接中可进行<strong>大数据量的传输</strong> </p></li><li><p>传输完毕，<strong>需释放已建立的连接，效率低</strong></p></li><li><p>UDP协议：</p><ul><li>将数据、源、目的封装成数据包，<strong>不需要建立连接</strong> </li><li>每个数据报的大小限制在64K内 </li><li>发送不管对方是否准备好，接收方收到也不确认，故是<strong>不可靠的</strong> </li><li>可以广播发送 </li><li>发送数据结束时<strong>无需释放资源，开销小，速度快</strong></li></ul></li></ul><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402170719930.png" class title="image-20230402170719930"><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402170734703.png" class title="image-20230402170734703"><h5 id="7-2-TCP网络编程"><a href="#7-2-TCP网络编程" class="headerlink" title="7.2 TCP网络编程"></a>7.2 TCP网络编程</h5><p><strong>基于Socket的TCP编程</strong></p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402171056368.png" class title="image-20230402171056368"><p><strong>客户端Socket的工作过程包含以下四个基本的步骤：</strong></p><p>1.<strong>创建 Socket：</strong>根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端 响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。 </p><p>2.<strong>打开连接到 Socket 的输入&#x2F;出流：</strong> 使用 getInputStream()方法获得输入流，使用 getOutputStream()方法获得输出流，进行数据传输 3.<strong>按照一定的协议对 Socket 进行读&#x2F;写操作：</strong>通过输入流读取服务器放入线路的信息 （但不能读取自己放入线路的信息），通过输出流将信息写入线程。 </p><p>4.<strong>关闭 Socket：</strong>断开客户端到服务器的连接，释放线路</p><p><strong>服务器程序的工作过程包含以下四个基本的步骤：</strong></p><p>1.<strong>调用 ServerSocket(int port) ：</strong>创建一个服务器端套接字，并绑定到指定端口 上。用于监听客户端的请求。 </p><p>2.<strong>调用 accept()：</strong>监听连接请求，如果客户端请求连接，则接受连接，返回通信 套接字对象。</p><p>3.<strong>调用 该Socket类对象的 getOutputStream() 和 getInputStream ()：</strong>获取输出 流和输入流，开始网络数据的发送和接收。 </p><p>4.<strong>关闭ServerSocket和Socket对象：</strong>客户端访问结束，关闭通信套接字。</p><h5 id="7-3UDP网络通信"><a href="#7-3UDP网络通信" class="headerlink" title="7.3UDP网络通信"></a>7.3UDP网络通信</h5><p>​系统不保证 UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</p><p><strong>流程：</strong></p><ol><li>DatagramSocket与DatagramPacket </li><li>建立发送端，接收端 </li><li>建立数据包 </li><li>调用Socket的发送、接收方法 </li><li>关闭Socket</li></ol><h3 id="八、反射机制"><a href="#八、反射机制" class="headerlink" title="八、反射机制"></a>八、反射机制</h3><h5 id="8-1-反射机制概述"><a href="#8-1-反射机制概述" class="headerlink" title="8.1 反射机制概述"></a>8.1 反射机制概述</h5><p>​Reflection（反射）是被视为<strong>动态语言</strong>（<strong>在运行时代码可以根据某些条件改变自身结构</strong>）的关键，反射机制允许程序在执行期 借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内 部属性及方法。</p><p>​加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个 类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可 以通过这个对象看到类的结构。<strong>这个对象就像一面镜子，透过这个镜子看 到类的结构，所以，我们形象的称之为：反射。</strong></p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402173107379.png" class title="image-20230402173107379"><p><strong>常用功能</strong></p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><h5 id="8-2-理解Class类"><a href="#8-2-理解Class类" class="headerlink" title="8.2 理解Class类"></a>8.2 理解Class类</h5><p>​在Object类中定义了以下的方法，此方法 将被所有子类继承： **public final Class getClass()**方法返回值的类型是一个Class类， 此类是Java反射的源头，实际上所谓反射 从程序的运行结果来看也很好理解，即： 可以通过对象反射求出类的名称。</p><p>​对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接 口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个Class对象对应的是一个加载到JVM中的一个.class文件</p><p><strong>获取Class类的实例(常用3种方法)</strong></p><ul><li>若已知具体的类，通过类的class属性获取，该方法最为安全可靠， 程序性能最高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> String.class;<br></code></pre></td></tr></table></figure><ul><li>已知某个类的实例，调用该实例的getClass()方法获取Class对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> “www.atguigu.com”.getClass();<br></code></pre></td></tr></table></figure><ul><li>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方 法forName()获取，可能抛出ClassNotFoundException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(“java.lang.String”);<br></code></pre></td></tr></table></figure><p><strong>类加载过程</strong></p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402193230024.png" class title="image-20230402193230024"><h5 id="8-3-创建运行时类的对象"><a href="#8-3-创建运行时类的对象" class="headerlink" title="8.3 创建运行时类的对象"></a>8.3 创建运行时类的对象</h5><p>​创建类的对象：调用Class对象的newInstance()方法，要求：类必须有一个<strong>无参数的构造器。</strong> 类的构造器的<strong>访问权限需要</strong>足够。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.根据全类名获取对应的Class对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> “atguigu.java.Person<span class="hljs-string">&quot;;</span><br><span class="hljs-string">Class clazz = null;</span><br><span class="hljs-string">clazz = Class.forName(name);</span><br><span class="hljs-string">//2.调用指定参数结构的构造器，生成Constructor的实例</span><br><span class="hljs-string">Constructor con = clazz.getConstructor(String.class,Integer.class);</span><br><span class="hljs-string">//3.通过Constructor的实例创建对应类的对象，并初始化类属性</span><br><span class="hljs-string">Person p2 = (Person) con.newInstance(&quot;</span>Peter<span class="hljs-string">&quot;,20);</span><br><span class="hljs-string">System.out.println(p2);</span><br></code></pre></td></tr></table></figure><p><strong>使用反射可以取得：</strong></p><p>1.实现的全部接口 </p><p>​<strong>public Class[] getInterfaces()</strong>  确定此对象所表示的类或接口实现的接口。 </p><p>2.所继承的父类 </p><p>​<strong>public Class getSuperclass()</strong> 返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的 Class。</p><p>3.全部的构造器 </p><p>​<strong>public Constructor[] getConstructors()</strong> 返回此 Class 对象所表示的类的所有public构造方法。 </p><p>​<strong>public Constructor[] getDeclaredConstructors()</strong> 返回此 Class 对象表示的类声明的所有构造方法。</p><p>4.全部的方法 </p><p>​<strong>public Method[] getDeclaredMethods()</strong> 返回此Class对象所表示的类或接口的全部方法 </p><p>​<strong>public Method[] getMethods()</strong>  返回此Class对象所表示的类或接口的public的方法</p><p>5.全部的Field </p><p>​<strong>public Field[] getFields()</strong>  返回此Class对象所表示的类或接口的public的Field。 </p><p>​<strong>public Field[] getDeclaredFields()</strong>  返回此Class对象所表示的类或接口的全部Field。</p><p>6.Annotation相关</p><p>​<strong>get Annotation(Class annotationClass)</strong>  </p><p>​<strong>getDeclaredAnnotations()</strong> </p><p>7.泛型相关</p><p>​获取父类泛型类型：<strong>Type getGenericSuperclass()</strong> </p><p>​泛型类型：<strong>ParameterizedType</strong> </p><p>​获取实际的泛型类型参数数组：<strong>getActualTypeArguments()</strong></p><p>8.类所在的包 </p><p>​<strong>Package getPackage()</strong> </p><h5 id="8-4-调用运行时类的指定结构"><a href="#8-4-调用运行时类的指定结构" class="headerlink" title="8.4 调用运行时类的指定结构"></a>8.4 调用运行时类的指定结构</h5><p><strong>调用指定方法</strong></p><p>1.通过Class类的<strong>getMethod</strong>(String name,Class…parameterTypes)方法取得 一个Method对象，并设置此方法操作时所需要的参数类型。 </p><p>2.之后使用<strong>Object invoke</strong>(Object obj, Object[] args)进行调用，并向方法中 传递要设置的obj对象的参数信息。</p><img src="/2023/04/01/Java%E9%AB%98%E7%BA%A7/image-20230402202613583.png" class title="image-20230402202613583"><p><strong>调用指定属性</strong></p><p>​在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和 get()方法就可以完成设置和取得属性内容的操作。</p><ul><li><strong>public Field getField</strong>(String name) 返回此Class对象表示的类或接口的指定的 public的Field。 </li><li><strong>public Field getDeclaredField</strong>(String name)返回此Class对象表示的类或接口的 指定的Field。</li></ul><h5 id="8-5-动态代理"><a href="#8-5-动态代理" class="headerlink" title="8.5 动态代理"></a>8.5 动态代理</h5><p><strong>代理设计模式的原理:</strong></p><p>​使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原 始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原 始对象上。</p><p><strong>动态代理步骤：</strong></p><p>1.创建一个实现接口InvocationHandler的类，它必须实现invoke方 法，以完成代理的具体操作。</p><p>2.创建被代理的类以及接口</p><p>3.通过Proxy的静态方法 newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建 一个Subject接口代理</p><p>4.通过 Subject代理调用RealSubject实现类的方法</p>]]></content>
    
    
    <categories>
      
      <category>JAVA核心基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础</title>
    <link href="/2023/03/31/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/31/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="一、编程基础"><a href="#一、编程基础" class="headerlink" title="一、编程基础"></a>一、编程基础</h3><h5 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h5><p>​计算机包括硬件(hardware)和软件(software)两部分。硬件包括计算机中可以 看得见的物理部分。而软件提供看不见的指令。这些指令控制硬件并且使得 硬件完成特定的任务。</p><p><strong>程序设计</strong></p><ul><li>定义：创建（或开发）软件。软件包含了指令，告诉计算机做什么。 </li><li>应用场景：软件遍布我们周围。除了个人计算机，飞机、汽车、手机甚至烤 面包机中，同样运行着软件。</li></ul><h5 id="1-2-计算机硬件介绍"><a href="#1-2-计算机硬件介绍" class="headerlink" title="1.2 计算机硬件介绍"></a>1.2 计算机硬件介绍</h5><p><strong>主要硬件：</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331112521308.png" class title="image-20230331112521308"><ul><li>中央处理器(Central Processing Unit,CPU)：是计算机的大脑。它从内存中获取指令，然 后执行这些指令。</li><li>内存(也叫 Random-Access Memory,RAM)：由一个有序的 字节序列组成，用于存储程序及程序需要的数据。 内存是带电存储的(一旦断电数据就会消失)，<strong>一个程序和它的数据在被CPU执行前必须移到计算机的内存中。</strong></li><li>存储设备：内存中的信息在断电时会丢失。那我们可以考虑将程序和数据永久的保存在存储设备上。当计算机 确实需要这些数据时，再移入内存，因为从内存中读取比从存储设备读取要快得多。</li><li>输入设备：键盘（keyboard）和鼠标（mouse） </li><li>输出设备：显示器（monitor）和打印机（printer）</li><li>通信设备：计算机通过通信设备进行联网。</li></ul><p><strong>工作流程：</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331112631103.png" class title="image-20230331112631103"><h5 id="1-3-操作系统"><a href="#1-3-操作系统" class="headerlink" title="1.3 操作系统"></a>1.3 操作系统</h5><p>​操作系统(Operating System)是运行在计算机上的最重要的 程序，它可以管理和控制计算机的活动。</p><p><strong>操作系统的主要任务</strong></p><ul><li>控制和监视系统的活动 </li><li>分配和调配系统资源 </li><li>调度操作</li></ul><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331113834366.png" class title="image-20230331113834366"><h3 id="二、Java语言概述"><a href="#二、Java语言概述" class="headerlink" title="二、Java语言概述"></a>二、Java语言概述</h3><h5 id="2-1-基础知识图解"><a href="#2-1-基础知识图解" class="headerlink" title="2.1 基础知识图解"></a>2.1 基础知识图解</h5><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331114433386.png" class title="image-20230331114433386"><h5 id="2-2-Java语言概述"><a href="#2-2-Java语言概述" class="headerlink" title="2.2 Java语言概述"></a>2.2 Java语言概述</h5><ul><li>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一 门高级编程语言。 </li><li>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以 在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使 用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中。 </li><li>随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</li></ul><h5 id="2-3-Java语言的特点"><a href="#2-3-Java语言的特点" class="headerlink" title="2.3 Java语言的特点"></a>2.3 Java语言的特点</h5><ul><li>面向对象：两个基本概念：类、对象 ；三大特性：封装、继承、多态</li><li>健壮性：吸收了C&#x2F;C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与 释放等），提供了一个相对安全的内存管理和访问机制</li><li>跨平台：通过Java语言编写的应用程序在不同的系统平台上都可以运行。<strong>原理</strong>：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java  Virtual Machine) 即可。<strong>由JVM来负责Java程序在该系统中的运行。</strong></li></ul><h5 id="2-4-Java语言运行机制"><a href="#2-4-Java语言运行机制" class="headerlink" title="2.4 Java语言运行机制"></a>2.4 Java语言运行机制</h5><p><strong>核心机制–Java虚拟机</strong></p><ul><li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器</li><li>对于不同的平台，有不同的虚拟机</li><li>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行</li><li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ul><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331145000597.png" class title="image-20230331145000597"><p><strong>核心机制–垃圾回收</strong></p><ul><li>Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空 间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。</li><li>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</li></ul><h5 id="2-5-JDK、JRE"><a href="#2-5-JDK、JRE" class="headerlink" title="2.5 JDK、JRE"></a>2.5 JDK、JRE</h5><ul><li>JDK:包含了java的开发工具，也包括了 JRE。所以安装了JDK，就不用在单独安装JRE了。</li><li>JRE:包括Java虚拟机和Java程序所需的核心类库等， 如果想要<strong>运行</strong>一个开发好的Java程序，计算机中<strong>只需要</strong>安装JRE即可。</li></ul><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331145855498.png" class title="image-20230331145855498"><p><strong>JDK &#x3D; JRE + 开发工具集（例如Javac编译工具等)</strong></p><p><strong>JRE &#x3D; JVM + Java SE标准类库</strong></p><h5 id="2-6-HelloWorld"><a href="#2-6-HelloWorld" class="headerlink" title="2.6 HelloWorld"></a>2.6 HelloWorld</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(“Hello World!”);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>将 Java 代码编写到扩展名为 .java 的文件中。 </li><li>通过 javac 命令对该 java 文件进行编译。</li><li>通过 java 命令对生成的 class 文件进行运行。</li></ol><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331150445667.png" class title="image-20230331150445667"><h5 id="2-7-注释"><a href="#2-7-注释" class="headerlink" title="2.7 注释"></a>2.7 注释</h5><ul><li>Java中的注释类型： 单行注释、 多行注释 、文档注释 (java特有)</li><li>提高了代码的阅读性；调试程序的重要方法。</li><li>注释是一个程序员必须要具有的良好编程习惯。</li></ul><h3 id="三、Java基本语法"><a href="#三、Java基本语法" class="headerlink" title="三、Java基本语法"></a>三、Java基本语法</h3><h5 id="3-1-关键字"><a href="#3-1-关键字" class="headerlink" title="3.1 关键字"></a>3.1 关键字</h5><p><strong>关键字：</strong>被Java语言赋予了<strong>特殊含义</strong>，用做<strong>专门用途</strong>的字符串（单词）</p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331151539034.png" class title="image-20230331151539034"><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331151554196.png" class title="image-20230331151554196"><h5 id="3-2-标识符"><a href="#3-2-标识符" class="headerlink" title="3.2 标识符"></a>3.2 标识符</h5><p><strong>标识符：</strong>对各种变量、方法和类等要素命名时使用的字符序列。<strong>凡是自己可以起名字的地方都叫标识符。</strong></p><p><strong>定义合法标识符规则：</strong></p><ul><li>由26个英文字母大小写，0-9 ，_或 $ 组成 </li><li>数字不可以开头。 </li><li>不可以使用关键字和保留字，但能包含关键字和保留字。 </li><li>Java中严格区分大小写，长度无限制。 </li><li>标识符不能包含空格。</li></ul><p><strong>Java中的名称命名规范：</strong></p><ul><li>包名：多单词组成时所有字母都小写：xxxyyyzzz </li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz </li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个 单词首字母大写：xxxYyyZzzz</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul><h5 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h5><p><strong>概念：</strong>内存中的一个存储区域 ，该区域的数据可以在同一类型范围内不断变化 ，变量是程序中最基本的存储单元。用于在内存中保存数据。</p><p><strong>Java中每个变量必须先声明，后使用</strong></p><ul><li>声明变量：&lt;数据类型&gt; &lt;变量名称&gt;</li><li>变量赋值：&lt;变量名称&gt; &#x3D; &lt;值&gt;</li><li>声明和赋值：&lt;数据类型&gt; &lt;变量名&gt; &#x3D; &lt;初始化值&gt;</li></ul><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331153146241.png" class title="image-20230331153146241"><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230402084022653.png" class title="image-20230402084022653"><p><strong>整数类型：byte、short、int、long</strong></p><ul><li>Java的整型常量默认为int型，声明long型常量须后加“l”或“L”</li><li>Java程序中变量通常量声明为int型，除非不足以表示较大的数，才使用long</li></ul><p><strong>浮点类型：float、double</strong></p><ul><li>Java的浮点型常量默认为double型，声明float型常量，须加“f”或“F”</li></ul><p><strong>字符类型:char</strong></p><ul><li>‘a’–97 ‘A’–65 ‘0’–48</li></ul><p><strong>布尔类型：boolean</strong></p><ul><li>true、false</li></ul><h5 id="3-4-基本数据类型转换"><a href="#3-4-基本数据类型转换" class="headerlink" title="3.4 基本数据类型转换"></a>3.4 基本数据类型转换</h5><p><strong>自动类型转换</strong></p><p>​容量小的类型自动转换为容量大的数据类型。有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的 那种数据类型，然后再进行计算。</p><p>​<strong>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类 型的值将自动转化为字符串(String)类型。</strong></p><p><strong>强制类型转换</strong></p><p>​自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使 用时要加上强制转换符：()，但<strong>可能造成精度降低或溢出</strong>,格外要注意。</p><h5 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5 运算符"></a>3.5 运算符</h5><p><strong>算数运算符</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331154155424.png" class title="image-20230331154155424"><p><strong>赋值运算符</strong></p><p>​当“&#x3D;”两侧数据类型不一致时，可以使用自动类型转换或使用强制 类型转换原则进行处理。</p><p>+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;</p><p><strong>关系运算符</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331154610582.png" class title="image-20230331154610582"><p><strong>逻辑运算符</strong></p><p>​&amp;—逻辑与 | —逻辑或 ！—逻辑非 &amp;&amp; —短路与 || —短路或 ^ —逻辑异或</p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331154654877.png" class title="image-20230331154654877"><p><strong>位运算符</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331154737585.png" class title="image-20230331154737585"><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331154825288.png" class title="image-20230331154825288"><p><strong>三元运算符</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331154858807.png" class title="image-20230331154858807"><p>​注意：表达式1和表达式2为<strong>同种类型</strong></p><h5 id="3-6-程序流程控制"><a href="#3-6-程序流程控制" class="headerlink" title="3.6 程序流程控制"></a>3.6 程序流程控制</h5><ul><li><p>顺序结构：程序从上到下逐行地执行，中间没有任何判断和跳转。</p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331155309276.png" class title="image-20230331155309276"></li><li><p>分支结构：根据条件，选择性地执行某段代码。 有if…else和switch-case两种分支语句。</p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331155337622.png" class title="image-20230331155337622"><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331155437817.png" class title="image-20230331155437817"><p>switch(表达式)中表达式的值<strong>必须是下述几种类型之一</strong>：byte，short， char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</p></li><li><p>循环结构：根据循环条件，重复性的执行某段代码。 有while、do…while、for三种循环语句。 </p><p>注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素。</p></li></ul><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331155546276.png" class title="image-20230331155546276"><h3 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h3><h5 id="4-1数组的概述"><a href="#4-1数组的概述" class="headerlink" title="4.1数组的概述"></a>4.1数组的概述</h5><p>数组(Array)，是多个相同类型数据按一定顺序排列 的集合，并使用一个名字命名，并通过编号的方式 对这些数据进行统一管理。</p><ul><li>数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。 </li><li>创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是 这块连续空间的首地址。 </li><li>数组的长度一旦确定，就不能修改。 </li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li></ul><h5 id="4-2-数组的使用"><a href="#4-2-数组的使用" class="headerlink" title="4.2 数组的使用"></a>4.2 数组的使用</h5><p>​声明方式：type var[] 或 type[] var；</p><p><strong>动态初始化：</strong>数组声明且为数组元素分配空间与赋值的操作分开进行</p><p><strong>静态初始化：</strong>在定义数组的同时就为数组元素分配空间并赋值。</p><ul><li>定义并用运算符new为之分配空间后，才可以引用数组中的每个元素；</li><li>数组元素的引用方式：数组名[数组元素下标]</li><li>每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的长 度(元素个数)</li></ul><p>二维、三维数组与一维类似</p><h5 id="4-3-Arrays工具类"><a href="#4-3-Arrays工具类" class="headerlink" title="4.3 Arrays工具类"></a>4.3 Arrays工具类</h5><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比 如排序和搜索）的各种方法。</p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331160619173.png" class title="image-20230331160619173"><h3 id="五、面向对象编程"><a href="#五、面向对象编程" class="headerlink" title="五、面向对象编程"></a>五、面向对象编程</h3><h5 id="5-1-面向过程与面向对象"><a href="#5-1-面向过程与面向对象" class="headerlink" title="5.1 面向过程与面向对象"></a>5.1 面向过程与面向对象</h5><p>​二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是<strong>功能行为</strong>，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对 象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。 </p><p>​面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如 抽象、分类、继承、聚合、多态等。</p><h5 id="5-2-类和对象"><a href="#5-2-类和对象" class="headerlink" title="5.2 类和对象"></a>5.2 类和对象</h5><p>类(Class)和对象(Object)是面向对象的核心概念。 </p><ul><li>类是对一类事物的描述，是抽象的、概念上的定义 </li><li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。</li></ul><p><strong>类的语法格式</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe">修饰符 <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>    属性声明;<br>    方法声明;<br>&#125;<br>说明：修饰符<span class="hljs-keyword">public</span>：类可以被任意访问<br>类的正文要用&#123; &#125;括起来<br></code></pre></td></tr></table></figure><p><strong>对象的创建和使用</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">创建对象语法： 类名 对象名 <span class="hljs-operator">=</span> new 类名()<span class="hljs-comment">;</span><br>使用“对象名.对象成员”的方式访问对象成员（包括属性和方法）<br></code></pre></td></tr></table></figure><ul><li><strong>堆（Heap）</strong>：此内存区域的唯一目的 就是存放对象实例. </li><li><strong>栈（Stack）</strong>：是指虚拟机栈。虚拟机栈用于存储局部变量等。 局部变量表存放了编译期可知长度的各 种基本数据类型（boolean、byte、 char 、 short 、 int 、 float 、 long 、 double）、对象引用 （reference类型， 它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。 </li><li><strong>方法区（Method Area）</strong>：用于存储已 被虚拟机加载的类信息、常量、静态 变量、即时编译器编译后的 代码等数据。</li></ul><p><strong>抽象类</strong> （abstract）</p><ul><li>抽象类和抽象方法必须使用 abstract 关键字修饰 </li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类 </li><li>抽象类不能实例化 抽象类可以有构造方法 </li><li>抽象类的子类，要么重写抽象类中的所有抽象方法，要么是抽象类</li></ul><p>不能用abstract修饰变量、代码块、构造器； 不能用abstract修饰私有方法、静态方法、final的方法、final的类。</p><p><strong>接口</strong>(interface)</p><ul><li>用interface来定义。 </li><li>接口中的所有成员变量都默认是由public static final修饰的。 </li><li>接口中的所有抽象方法都默认是由public abstract修饰的。 </li><li>接口中没有构造器。 接口采用多继承机制</li></ul><p><strong>接口和抽象类之间的对比</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230402092143006.png" class title="image-20230402092143006"><h5 id="5-3-类的成员"><a href="#5-3-类的成员" class="headerlink" title="5.3 类的成员"></a>5.3 类的成员</h5><p><strong>属性：</strong></p><p>​修饰符 数据类型 属性名 &#x3D; 初始化值 ; </p><p><strong>方法：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">修饰符 返回值类型 方法名（参数类型 形参<span class="hljs-number">1</span>, 参数类型 形参<span class="hljs-number">2</span>, ….）｛<br>    方法体程序代码<br>    <span class="hljs-keyword">return</span> 返回值;<br>｝<br></code></pre></td></tr></table></figure><p><strong>方法重载</strong></p><p>​在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</p><p><strong>构造器：</strong></p><p>​构造器的作用：创建对象；给对象进行初始化</p><p><strong>this关键字：</strong></p><ul><li>它在方法内部使用，即这个方法所属对象的引用； </li><li>它在构造器内部使用，表示该构造器正在初始化的对象。</li></ul><p><strong>static 关键字：</strong>被修饰后的成员具备以下特点</p><ul><li>随着类的加载而加载 </li><li>优先于对象存在 </li><li>修饰的成员，被所有对象所共享 </li><li>访问权限允许时，可不创建对象，直接被类调</li></ul><p><strong>final关键字：</strong> final代表最终的意思，可以修饰成员方法，成员变量，类 </p><ul><li>final修饰方法：该方法不能被重写 </li><li>fianl修饰类：该类不能被继承（不能有子类，但是可以有父类） </li><li>final修饰变量：表明该变量是一个常量，<strong>不能再次赋值</strong> 变量是基本类型,不能改变的是值 变量是引用类型,不能改变的是地址值,<strong>但地址里面的内容是可以改变的</strong> </li><li>final在修饰成员变量 初始化时机 在创建的时候，直接给值 在构造方法结束之前，完成赋值</li></ul><p><strong>成员访问特点：</strong></p><ul><li>成员变量：编译看父类，运行看父类 </li><li>成员方法：编译看父类，运行看子类</li></ul><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230402090954329.png" class title="image-20230402090954329"><h5 id="5-4-封装"><a href="#5-4-封装" class="headerlink" title="5.4 封装"></a>5.4 封装</h5><p>​使用者对类内部定义的属性(对象的成员变量)的直接操作会导致数据的错误、混乱或安全性问题。</p><p>Java中通过将数据声明为私有的(private)，再提供公共的（public） 方法:getXxx()和setXxx()实现对该属性的操作，以实现下述目的：</p><ul><li>隐藏一个类中不需要对外提供的实现细节；</li><li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑， 限制对属性的不合理操作；</li><li>便于修改，增强代码的可维护性；</li></ul><h5 id="5-5-继承"><a href="#5-5-继承" class="headerlink" title="5.5 继承"></a>5.5 继承</h5><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331165815943.png" class title="image-20230331165815943"><p>多个类中存在<strong>相同属性和行为</strong>时，将这些内容抽取到单独一个类中， 那么多个类无需再定义这些属性和行为，只要继承那个类即可。</p><ul><li>继承的出现减少了代码冗余，提高了代码的复用性。 </li><li>继承的出现，更有利于功能的扩展。 </li><li>继承的出现让类与类之间产生了关系，提供了多态的前提。</li></ul><p><strong>方法的重写</strong>：在子类中可以根据需要对从父类中继承来的方法进行改造，也称 为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。</p><p><strong>访问权限修饰符</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331170952641.png" class title="image-20230331170952641"><h5 id="5-6-多态"><a href="#5-6-多态" class="headerlink" title="5.6 多态"></a>5.6 多态</h5><p>​对象的多态性：<strong>父类的引用指向子类的对象</strong>（提高了代码的通用性，常称作接口重用）</p><p>​一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就<strong>不能再访问子类中添加的属性和方法</strong></p><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331172705590.png" class title="image-20230331172705590"><p>​从子类到父类的类型转换可以自动进行 </p><p>​从父类到子类的类型转换必须通过造型(强制类型转换)实现</p><h3 id="六、异常处理"><a href="#六、异常处理" class="headerlink" title="六、异常处理"></a>六、异常处理</h3><h5 id="6-1-异常概述"><a href="#6-1-异常概述" class="headerlink" title="6.1 异常概述"></a>6.1 异常概述</h5><p>​异常：在Java语言中，将程序执行中发生的不正常情况称为“异常” 。(开发过程中的语法错误和逻辑错误不是异常)</p><p>Java程序在执行过程中所发生的异常事件可分为两类：</p><ul><li>Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。</li><li>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使 用针对性的代码进行处理。例如： 空指针访问 、试图读取不存在的文件、网络连接中断、数组角标越界</li></ul><p><strong>运行时异常</strong></p><p>​是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序 员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。<strong>对于这类异常，可以不作处理</strong>，因为这类异常很普遍，若全处理可能会对 程序的可读性和运行效率产生影响。</p><p><strong>编译时异常</strong></p><p>​是指编译器要求<strong>必须处置的异常</strong>。即程序在运行时由于外界因素造成的一 般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。 对于这类异常，如果程序不处理，可能会带来意想不到的结果。</p><h5 id="6-2-异常处理的方式"><a href="#6-2-异常处理的方式" class="headerlink" title="6.2 异常处理的方式"></a>6.2 异常处理的方式</h5><p><strong>异常的抛出</strong></p><p>​如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处 理。如果异常没有在调用者方法中处理，它继续被抛给这个调用 方法的上层方法。<strong>这个过程将一直继续下去，直到异常被处理</strong>。</p><p>如果一个异常回到main()方法，并且<strong>main()也不处理，则程序运行终止</strong>。</p><p><strong>异常处理</strong>是通过try-catch-finally语句实现的。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lasso">try&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//可能产生异常的代码</span><br>&#125;<br>catch( ExceptionName1 e )&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//当产生ExceptionName1型异常时的处置措施</span><br>&#125;<br>catch( ExceptionName2 e )&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//当产生ExceptionName2型异常时的处置措施</span><br>&#125;<br>finally&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//无论是否发生异常，都无条件执行的语句</span><br>&#125; <br><br></code></pre></td></tr></table></figure><p><strong>声明抛出异常</strong></p><p>​如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明<strong>该方法将不对这些异常进行处理， 而由该方法的调用者负责处理</strong>。在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可 以是方法中产生的异常类型，也可以是它的父类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>public void methodA() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>……<br>&#125; &#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>public void methodA() <span class="hljs-keyword">throws</span> <span class="hljs-type">FileNotFoundException</span> &#123;<br>……<br>&#125; &#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>public void methodA() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123; <span class="hljs-comment">//报错</span><br>……<br>&#125; &#125;<br></code></pre></td></tr></table></figure><img src="/2023/03/31/Java%E5%9F%BA%E7%A1%80/image-20230331200001764.png" class title="image-20230331200001764">]]></content>
    
    
    <categories>
      
      <category>JAVA核心基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
