<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA	高级</title>
    <link href="/2023/04/02/Java%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/04/02/Java%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Java高级"><a href="#Java高级" class="headerlink" title="Java高级"></a>Java高级</h1><h3 id="一、多线程"><a href="#一、多线程" class="headerlink" title="一、多线程"></a>一、多线程</h3><h5 id="1-1基本概念"><a href="#1-1基本概念" class="headerlink" title="1.1基本概念"></a>1.1基本概念</h5><ul><li>程序：为完成特定任务、用某种语言编写的一组指令的集合。即指一 段静态的代码，静态对象。</li><li>进程：是程序的一次执行过程，或是正在运行的一个程序。是一个动态 的过程：有它自身的产生、存在和消亡的过程。（程序是静态的，进程是动态的）<strong>进程作为资源分配的单位</strong>，系统在运行时会为每个进程分配不同的内存区域</li><li>线程：进程可进一步细化为线程，是一个程序内部的一条执行路径。一个进程同一时间并行执行多个线程，就是支持多线程的。<strong>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)</strong></li></ul><p><strong>并行：</strong>多个CPU同时执行多个任务。比如：多个人同时做不同的事。 </p><p><strong>并发：</strong>一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</p><h5 id="1-2线程的创建和使用"><a href="#1-2线程的创建和使用" class="headerlink" title="1.2线程的创建和使用"></a>1.2线程的创建和使用</h5><p>Java语言的JVM允许程序运行多个线程，它通过<strong>java.lang.Thread</strong> 类来体现。</p><p><strong>Thread类的特性</strong>：</p><ul><li>每个线程都是通过某个特定<strong>Thread对象的run()方法来完成操作的</strong>，经常 把run()方法的主体称为线程体</li><li>通过该Thread对象的<strong>start()方法来启动这个线程</strong>，而非直接调用run()</li></ul><p><strong>API中创建线程的两种方式</strong></p><p>1）继承Thread类的方式 </p><ul><li>定义子类继承Thread类。</li><li>子类中重写Thread类中的run方法。 </li><li>创建Thread子类对象，即创建了线程对象。 </li><li>调用线程对象start方法：启动线程，调用run方法。</li></ul><p>2）实现Runnable接口的方式</p><ul><li><p>定义子类，实现Runnable接口。 </p></li><li><p>子类中重写Runnable接口中的run方法。 </p></li><li><p>通过Thread类含参构造器创建线程对象。 </p></li><li><p>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。 </p></li><li><p>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p></li></ul><p><strong>两种实现方式的区别</strong></p><ul><li>继承Thread：线程代码存放Thread子类run方法中。 </li><li>实现Runnable：线程代码存在接口的子类的run方法。</li></ul><p><strong>注意：</strong></p><p>1）如果<strong>自己手动调用run()方法，那么就只是普通方法</strong>，没有启动多线程模式。 </p><p>2）run()方法由JVM调用，什么时候调用，执行的过程控制<strong>都由操作系统的CPU 调度决定</strong>。 </p><p>3）想要启动多线程，<strong>必须调用start方法</strong>。 </p><p>4）一个线程对象<strong>只能调用一次start()方法启动</strong>，如果重复调用了，则将抛出异常“IllegalThreadStateException”。</p><p>补充：Java中的线程分为两类，<strong>守护线程</strong>和<strong>用户线程</strong></p><p>守护线程是用来服务用户线程的，通过在start()方法前调用，用户线程结束守护线程也将结束</p><h5 id="1-3-Thread类的有关方法"><a href="#1-3-Thread类的有关方法" class="headerlink" title="1.3 Thread类的有关方法"></a>1.3 Thread类的有关方法</h5><ul><li>void start(): 启动线程，并执行对象的run()方法 </li><li>run(): 线程在被调度时执行的操作 </li><li>String getName(): 返回线程的名称 </li><li>void setName(String name):设置该线程名称 </li><li>static Thread currentThread(): 返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</li><li>static void yield()：线程让步，暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程 （若队列中没有同优先级的线程，忽略此方法）</li><li>join() ：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止 （低优先级的线程也可以获得执行 ）</li><li>static void sleep(long millis)：(指定时间:毫秒) 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队。 抛出InterruptedException异常</li></ul><h5 id="1-4线程的生命周期"><a href="#1-4线程的生命周期" class="headerlink" title="1.4线程的生命周期"></a>1.4线程的生命周期</h5><img src="/2023/04/02/Java%E9%AB%98%E7%BA%A7/image-20230401140518113.png" class title="image-20230401140518113"><ul><li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态 </li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已 具备了运行的条件，只是没分配到CPU资源 </li><li>运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线 程的操作和功能 </li><li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中 止自己的执行，进入阻塞状态 </li><li>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ul><h5 id="1-5-线程的同步"><a href="#1-5-线程的同步" class="headerlink" title="1.5 线程的同步"></a>1.5 线程的同步</h5><img src="/2023/04/02/Java%E9%AB%98%E7%BA%A7/image-20230401140449232.png" class title="image-20230401140449232"><p><strong>线程安全问题</strong></p><p>​当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有 执行完，另一个线程参与进来执行。导致共享数据的错误。</p><h6 id="1-5-1Synchronized"><a href="#1-5-1Synchronized" class="headerlink" title="1.5.1Synchronized"></a>1.5.1Synchronized</h6><p>当我们想要保证一个共享资源在<strong>同一时间只会被一个线程访问到时</strong>，我们可以在代码中使用<code>synchronized</code>关键字对类或者对象加锁。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">同步代码块<br><span class="hljs-built_in">synchronized</span> (对象)&#123;<br><span class="hljs-comment">// 需要被同步的代码；</span><br>&#125;<br>同步方法<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span> <span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>&#123; <br>….<br>&#125;<br></code></pre></td></tr></table></figure><p>必须确保使用同一个资源的多个线程共用一把锁，</p><h6 id="1-5-2-死锁"><a href="#1-5-2-死锁" class="headerlink" title="1.5.2 死锁"></a>1.5.2 死锁</h6><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃 自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于 阻塞状态，无法继续</li></ul><h6 id="1-5-3Lock"><a href="#1-5-3Lock" class="headerlink" title="1.5.3Lock"></a>1.5.3Lock</h6><p>​java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的 工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象 加锁，线程开始访问共享资源之前应先获得Lock对象。</p><p>​ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，<strong>比较常用的是ReentrantLock，可以 显式加锁、释放锁。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReenTrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br>lock.lock();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//保证线程安全的代码;</span><br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>lock.unlock(); <br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果同步代码有异常，要将unlock()写入finally语句块</strong></p><h6 id="1-5-4synchronized与Lock对比"><a href="#1-5-4synchronized与Lock对比" class="headerlink" title="1.5.4synchronized与Lock对比"></a>1.5.4synchronized与Lock对比</h6><ul><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是 隐式锁，出了作用域自动释放 </li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁 </li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有 更好的扩展性（提供更多的子类）</li></ul><h5 id="1-6-线程的通信"><a href="#1-6-线程的通信" class="headerlink" title="1.6 线程的通信"></a>1.6 线程的通信</h5><p> <strong>wait() 与 notify() 和 notifyAll()</strong></p><ul><li>wait()：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当 前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有 权后才能继续执行。</li><li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待 </li><li>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待</li></ul><p>这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报 java.lang.IllegalMonitorStateException异常。</p><h3 id="二、Java常用类"><a href="#二、Java常用类" class="headerlink" title="二、Java常用类"></a>二、Java常用类</h3><h5 id="2-1-字符串相关的类"><a href="#2-1-字符串相关的类" class="headerlink" title="2.1 字符串相关的类"></a>2.1 字符串相关的类</h5><p><strong>String类</strong></p><ul><li>int length()：返回字符串的长度： return value.length </li><li>char charAt(int index)： 返回某索引处的字符return value[index] </li><li>boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0 </li><li>String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写  String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写 </li><li>String trim()：返回字符串的副本，忽略前导空白和尾部空白  boolean equals(Object obj)：比较字符串的内容是否相同 </li><li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大 小写  String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+” </li><li>int compareTo(String anotherString)：比较两个字符串的大小 </li><li>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从 beginIndex开始截取到最后的一个子字符串。 </li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字 符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li><li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束 </li><li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始 </li><li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的 子字符串是否以指定前缀开始</li><li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列 时，返回 true  int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引 </li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出 现处的索引，从指定的索引开始 </li><li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引 </li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后 一次出现处的索引，从指定的索引开始反向搜索 注：indexOf和lastIndexOf方法如果未找到都是返回-1</li><li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是 通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 </li><li>String replace(CharSequence target, CharSequence replacement)：使 用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 </li><li>String replaceAll(String regex, String replacement) ： 使 用 给 定 的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 </li><li>String replaceFirst(String regex, String replacement) ： 使 用 给 定 的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。 </li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此 字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ul><p><strong>StringBuffer类</strong>不同于String，其对象必须使用构造器生成。有三个构造器： </p><ul><li><p>StringBuffer()：初始容量为16的字符串缓冲区 </p></li><li><p>StringBuffer(int size)：构造指定容量的字符串缓冲区 </p></li><li><p>StringBuffer(String str)：将内容初始化为指定字符串内容</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接 <br>StringBuffer <span class="hljs-keyword">delete</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">start</span>,<span class="hljs-type">int</span> <span class="hljs-keyword">end</span>)：删除指定位置的内容 <br>StringBuffer replace(<span class="hljs-type">int</span> <span class="hljs-keyword">start</span>, <span class="hljs-type">int</span> <span class="hljs-keyword">end</span>, String str)：把[<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>)位置替换为str StringBuffer <span class="hljs-keyword">insert</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">offset</span>, xxx)：在指定位置插入xxx StringBuffer reverse() ：把当前字符序列逆转<br></code></pre></td></tr></table></figure><p><strong>StringBuilder</strong> 和 StringBuffer 非常类似，均代表可变的字符序列，而且 提供相关功能的方法也一样</p><p><strong>对比String、StringBuffer、StringBuilder</strong></p><ul><li>String(JDK1.0)：不可变字符序列 </li><li>StringBuffer(JDK1.0)：可变字符序列、效率低、线程安全 </li><li>StringBuilder(JDK 5.0)：可变字符序列、效率高、线程不安全</li></ul><h5 id="2-2-时间日期API"><a href="#2-2-时间日期API" class="headerlink" title="2.2 时间日期API"></a>2.2 时间日期API</h5><p>​LocalDate、LocalTime、LocalDateTime 类是其中较重要的几个类，它们的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。 它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区 相关的信息。 </p><ul><li>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。 </li><li>LocalTime表示一个时间，而不是日期。 </li><li>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</li></ul><img src="/2023/04/02/Java%E9%AB%98%E7%BA%A7/image-20230401152953369.png" class title="image-20230401152953369"><img src="/2023/04/02/Java%E9%AB%98%E7%BA%A7/image-20230401153119117.png" class title="image-20230401153119117"><h5 id="2-3-Java比较器"><a href="#2-3-Java比较器" class="headerlink" title="2.3 Java比较器"></a>2.3 Java比较器</h5><p> Java实现对象排序的方式有两种： </p><p>1）自然排序：java.lang.Comparable</p><ul><li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称 为类的自然排序。 </li><li>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即 通过 compareTo(Object obj) 方法的返回值来比较大小。如果当前对象this大 于形参对象obj，则返回正整数，如果当前对象this小于形参对象obj，则返回 负整数，如果当前对象this等于形参对象obj，则返回零。 </li><li>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或 Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有 序集合中的元素，无需指定比较器。 </li><li>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) &#x3D;&#x3D; 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals  一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。</li></ul><p>2）定制排序：java.util.Comparator</p><ul><li>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码， 或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那 么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排 序的比较。 </li><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返 回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示 o1小于o2。 </li><li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort）， 从而允许在排序顺序上实现精确控制。 </li><li>还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的 顺序，或者为那些没有自然顺序的对象 collection 提供排序。</li></ul><h5 id="2-4-System类"><a href="#2-4-System类" class="headerlink" title="2.4 System类"></a>2.4 System类</h5><p>​System类代表系统，<strong>系统级的很多属性和控制方法</strong>都放置在该类的内部。 该类位于java.lang包。System类内部包含in、out和err三个成员变量，分别代表标准输入流 (键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</p><ul><li>native long currentTimeMillis()： 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时 间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。 </li><li>void exit(int status)： 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表 异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。 9.5 System类 </li><li>void gc()： 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况。 </li><li>String getProperty(String key)： 该方法的作用是获得系统中属性名为key的属性对应的值</li></ul><h5 id="2-5-Math类"><a href="#2-5-Math类" class="headerlink" title="2.5 Math类"></a>2.5 Math类</h5><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回 值类型一般为double型。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">abs</span> 绝对值<br><span class="hljs-built_in">acos</span>,<span class="hljs-built_in">asin</span>,<span class="hljs-built_in">atan</span>,<span class="hljs-built_in">cos</span>,<span class="hljs-built_in">sin</span>,<span class="hljs-built_in">tan</span> 三角函数<br><span class="hljs-built_in">sqrt</span> 平方根<br><span class="hljs-built_in">pow</span>(<span class="hljs-type">double</span> a,doble b) a的b次幂<br><span class="hljs-built_in">log</span> 自然对数<br><span class="hljs-built_in">exp</span> e为底指数<br><span class="hljs-built_in">max</span>(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)<br><span class="hljs-built_in">min</span>(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)<br><span class="hljs-built_in">random</span>() 返回<span class="hljs-number">0.0</span>到<span class="hljs-number">1.0</span>的随机数<br><span class="hljs-type">long</span> <span class="hljs-built_in">round</span>(<span class="hljs-type">double</span> a) <span class="hljs-type">double</span>型数据a转换为<span class="hljs-type">long</span>型（四舍五入）<br><span class="hljs-title function_">toDegrees</span>(<span class="hljs-type">double</span> angrad) 弧度—&gt;角度<br><span class="hljs-title function_">toRadians</span>(<span class="hljs-type">double</span> angdeg) 角度—&gt;弧度<br></code></pre></td></tr></table></figure><h3 id="三、枚举类与注解"><a href="#三、枚举类与注解" class="headerlink" title="三、枚举类与注解"></a>三、枚举类与注解</h3><h5 id="3-1-枚举类的使用"><a href="#3-1-枚举类的使用" class="headerlink" title="3.1 枚举类的使用"></a>3.1 枚举类的使用</h5><p>枚举类：类的对象只有有限个，确定的。当需要定义一组常量时，强烈建议使用枚举类</p><p>枚举类对象的属性不应允许被改动, 所以应该使用 <strong>private final</strong> 修饰</p><h6 id="3-1-1如何自定义枚举类"><a href="#3-1-1如何自定义枚举类" class="headerlink" title="3.1.1如何自定义枚举类"></a>3.1.1如何自定义枚举类</h6><ol><li>私有化类的构造器，保证不能在类的外部创建其对象 </li><li>在类的内部创建枚举类的实例。声明为：public static final  </li><li>对象如果有实例变量，应该声明为private final，并在构造器中初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONNAME;<span class="hljs-comment">//季节的名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONDESC;<span class="hljs-comment">//季节的描述</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String seasonName,String seasonDesc)</span>&#123;<br>    <span class="hljs-built_in">this</span>.SEASONNAME = seasonName;<br>    <span class="hljs-built_in">this</span>.SEASONDESC = seasonDesc;<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;春暖花开&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;白雪皑皑&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-2如何使用关键字enum定义枚举类"><a href="#3-1-2如何使用关键字enum定义枚举类" class="headerlink" title="3.1.2如何使用关键字enum定义枚举类"></a>3.1.2如何使用关键字enum定义枚举类</h6><p>使用 enum 定义的枚举类默认继承了 java.lang.Enum类，因此不能再 继承其他类</p><p><strong>必须在枚举类的第一行声明枚举类对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SeasonEnum</span> &#123;<br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春风又绿江南岸&quot;</span>),<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;映日荷花别样红&quot;</span>),<br>    AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋水共长天一色&quot;</span>),<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;窗含西岭千秋雪&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">SeasonEnum</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.seasonName = seasonName;<br>        <span class="hljs-built_in">this</span>.seasonDesc = seasonDesc;<br>&#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonDesc</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> seasonDesc;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-3Enum类的主要方法"><a href="#3-1-3Enum类的主要方法" class="headerlink" title="3.1.3Enum类的主要方法"></a>3.1.3Enum类的主要方法</h6><ul><li>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的 枚举值。 </li><li>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符 串必须是枚举类对象的“名字”。如不是，会有运行时异常： IllegalArgumentException。 </li><li>toString()：返回当前枚举类对象常量的名称</li></ul><h6 id="3-1-4实现接口的枚举类"><a href="#3-1-4实现接口的枚举类" class="headerlink" title="3.1.4实现接口的枚举类"></a>3.1.4实现接口的枚举类</h6><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只 要统一实现该方法即可。</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,  则可以让每个枚举值分别来实现该方法</li></ul><h5 id="3-2-注解"><a href="#3-2-注解" class="headerlink" title="3.2 注解"></a>3.2 注解</h5><h6 id="3-2-1-注解-Annotation-概述"><a href="#3-2-1-注解-Annotation-概述" class="headerlink" title="3.2.1 注解(Annotation)概述"></a>3.2.1 注解(Annotation)概述</h6><p>​Annotation 其实就是代码里的<strong>特殊标记</strong>, 这些标记可以在编译, 类加 载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员 可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</p><p>​使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成 一个修饰符使用。用于修饰它支持的程序元素</p><p><strong>常见注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.annotation.javadoc;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@author</span> shkstart</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@see</span> Math.java</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavadocTest</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 程序的主方法，程序的入口</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> args String[] 命令行参数</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 求圆面积的方法</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> radius double 半径值</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@return</span> double 圆的面积</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br>&#125;<br><span class="hljs-meta">@author</span> 标明开发该类模块的作者，多个作者之间使用,分割<br><span class="hljs-meta">@version</span> 标明该类模块的版本<br><span class="hljs-meta">@see</span> 参考转向，也就是相关主题<br><span class="hljs-meta">@since</span> 从哪个版本开始增加的<br><span class="hljs-meta">@param</span> 对方法中某参数的说明，如果没有参数就不能写<br><span class="hljs-meta">@return</span> 对方法返回值的说明，如果方法的返回值类型是<span class="hljs-keyword">void</span>就不能写<br><span class="hljs-meta">@exception</span> 对方法可能抛出的异常进行说明 ，如果方法没有用<span class="hljs-keyword">throws</span>显式抛出的异常就不能写其中<br></code></pre></td></tr></table></figure><h6 id="3-2-1利用反射获取注解信息"><a href="#3-2-1利用反射获取注解信息" class="headerlink" title="3.2.1利用反射获取注解信息"></a>3.2.1利用反射获取注解信息</h6><p>​当一个 Annotation 类型被定义为运行时 Annotation 后, 该注解才是运行时 可见, 当 class 文件被载入时保存在 class 文件中的 Annotation 才会被虚拟 机读取。程序可以调用 AnnotatedElement对象的如下方法来访问 Annotation 信息</p><p><strong>反射</strong></p><p>​反射是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法,对于任意一个对象，都能够调用它的任意方法和属性,这种<strong>动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</strong></p><p><strong>一句话总结：反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p><h3 id="四、Java集合"><a href="#四、Java集合" class="headerlink" title="四、Java集合"></a>四、Java集合</h3><h5 id="4-1-集合框架概述"><a href="#4-1-集合框架概述" class="headerlink" title="4.1 集合框架概述"></a>4.1 集合框架概述</h5><p>Java 集合可分为 Collection 和 Map 两种体系</p><p>1）Collection接口：单列数据，定义了存取一组对象的方法的集合 </p><ul><li>List：元素有序、可重复的集合  </li><li>Set：元素无序、不可重复的集合</li></ul><img src="/2023/04/02/Java%E9%AB%98%E7%BA%A7/image-20230401164120130.png" class title="image-20230401164120130"><p>2） Map接口：双列数据，保存具有映射关系“key-value对”的集合</p><img src="/2023/04/02/Java%E9%AB%98%E7%BA%A7/image-20230401164152209.png" class title="image-20230401164152209"><h5 id="4-2-Collection接口"><a href="#4-2-Collection接口" class="headerlink" title="4.2 Collection接口"></a>4.2 Collection接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、添加<br>add(Object obj)<br>addAll(Collection coll)<br><span class="hljs-number">2</span>、获取有效元素的个数<br><span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span><br><span class="hljs-number">3</span>、清空集合<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span><br><span class="hljs-number">4</span>、是否是空集合<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span><br><span class="hljs-number">5</span>、是否包含某个元素<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object obj)</span>：是通过元素的equals方法来判断是否是同一个对象<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">containsAll</span><span class="hljs-params">(Collection c)</span>：也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。<br><span class="hljs-number">6</span>、删除<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object obj)</span> ：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeAll</span><span class="hljs-params">(Collection coll)</span>：取当前集合的差集<br><span class="hljs-number">7</span>、取两个集合的交集<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">retainAll</span><span class="hljs-params">(Collection c)</span>：把交集的结果存在当前集合中，不<br>影响c<br><span class="hljs-number">8</span>、集合是否相等<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br><span class="hljs-number">9</span>、转成对象数组<br>Object[] toArray()<br><span class="hljs-number">10</span>、获取集合对象的哈希值<br>hashCode()<br><span class="hljs-number">11</span>、遍历<br>iterator()：返回迭代器对象，用于集合遍历<br></code></pre></td></tr></table></figure><p>Iterator<strong>迭代器接口</strong></p><p>​Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元 素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。</p><p>​Iterator <strong>仅用于遍历集合</strong>，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</p><p>​集合对象每次调用iterator()方法都得到一个<strong>全新的迭代器对象</strong>，默认游标都在集合 的第一个元素之前。</p><p>比如：使用 foreach 循环遍历集合元素，<strong>遍历集合的底层调用Iterator完成操作</strong>。</p><h6 id="4-2-1-List接口"><a href="#4-2-1-List接口" class="headerlink" title="4.2.1 List接口"></a>4.2.1 List接口</h6><p>​List集合类中<strong>元素有序、且可重复</strong>，集合中的每个元素都有其对应的顺序索引。List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来 操作集合元素的方法。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> <span class="hljs-keyword">add</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>, <span class="hljs-keyword">Object</span> ele):在<span class="hljs-keyword">index</span>位置插入ele元素<br><span class="hljs-keyword">Object</span> <span class="hljs-keyword">get</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>):获取指定<span class="hljs-keyword">index</span>位置的元素<br><span class="hljs-keyword">Object</span> remove(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>):移除指定<span class="hljs-keyword">index</span>位置的元素，并返回此元素<br><span class="hljs-keyword">Object</span> <span class="hljs-keyword">set</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>, <span class="hljs-keyword">Object</span> ele):设置指定<span class="hljs-keyword">index</span>位置的元素为ele<br><span class="hljs-type">boolean</span> addAll(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>, Collection eles):从<span class="hljs-keyword">index</span>位置开始将eles中的所有元素添加进来<br><span class="hljs-type">int</span> indexOf(<span class="hljs-keyword">Object</span> obj):返回obj在集合中首次出现的位置<br></code></pre></td></tr></table></figure><h6 id="4-2-2List实现类"><a href="#4-2-2List实现类" class="headerlink" title="4.2.2List实现类"></a>4.2.2List实现类</h6><p>1）<strong>ArrayList</strong>（变长数组）</p><p>​本质上，ArrayList是对象引用的一个”变长”数组</p><ul><li>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组 </li><li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元 素时再创建一个始容量为10的数组</li></ul><p>2）<strong>LinkedList</strong>（双向链表）</p><p>​对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高</p><p>3）<strong>Vector</strong></p><p>​Vector 是一个古老的集合，JDK1.0就有了。大多数操作<strong>与ArrayList 相同</strong>，区别之处在于<strong>Vector是线程安全的。</strong></p><p>​Vector总是比ArrayList慢，所以尽量避免使用。</p><p><strong>面试题</strong></p><p>请问ArrayList&#x2F;LinkedList&#x2F;Vector的异同？谈谈你的理解？ArrayList底层 是什么？扩容机制？Vector和ArrayList的最大区别?</p><p>​ArrayList和LinkedList的异同 二者都线程不安全，相对线程安全的Vector，执行效率高。 此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。对于 随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。对于新增 和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p><p>​ArrayList和Vector的区别 Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于 强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下,大多数的Java程序员使用 ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。<strong>Vector每次扩容请求其大 小的2倍空间，而ArrayList是1.5倍</strong>。Vector还有一个子类Stack。</p><h6 id="4-2-3Set接口"><a href="#4-2-3Set接口" class="headerlink" title="4.2.3Set接口"></a>4.2.3Set接口</h6><p>​Set 集合<strong>不允许包含相同的元素</strong>，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。Set 判断两个对象是否相同不是使用 &#x3D;&#x3D; 运算符，<strong>而是根据 equals() 方法</strong></p><h6 id="4-2-4Set实现类"><a href="#4-2-4Set实现类" class="headerlink" title="4.2.4Set实现类"></a>4.2.4Set实现类</h6><p><strong>HashSet</strong> </p><p>​HashSet是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除 性能。</p><p><strong>特点：</strong></p><ul><li>不能保证元素的排列顺序</li><li>HashSet 不是线程安全的</li><li>集合元素可以是 null</li></ul><p>​HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。 对于存放在Set容器中的对象，对应的类一<strong>定要重写equals()和hashCode(Object  obj)方法，</strong>以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</p><p>解释：根据一个类的equals方法（改写后），<strong>两个截然不 同的实例有可能在逻辑上是相等的</strong>，但是，根据Object.hashCode()方法， 它们仅仅是两个对象。</p><p><strong>添加过程：</strong></p><p>​当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法 来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象 在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算<strong>得到在数组中的下标</strong>，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布， 该散列函数设计的越好）</p><p>​如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了， 那么会通过链表的方式继续链接。如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相 等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p><img src="/2023/04/02/Java%E9%AB%98%E7%BA%A7/image-20230401173358873.png" class title="image-20230401173358873"><p>​底层也是数组，初始容量为16，当如果使用率<strong>超过0.75</strong>，（16*0.75&#x3D;12） 就会扩大容量为原来的2倍。（16扩容为32，依次为64,128….等）</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础</title>
    <link href="/2023/04/01/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/04/01/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="一、编程基础"><a href="#一、编程基础" class="headerlink" title="一、编程基础"></a>一、编程基础</h3><h5 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h5><p>​计算机包括硬件(hardware)和软件(software)两部分。硬件包括计算机中可以 看得见的物理部分。而软件提供看不见的指令。这些指令控制硬件并且使得 硬件完成特定的任务。</p><p><strong>程序设计</strong></p><ul><li>定义：创建（或开发）软件。软件包含了指令，告诉计算机做什么。 </li><li>应用场景：软件遍布我们周围。除了个人计算机，飞机、汽车、手机甚至烤 面包机中，同样运行着软件。</li></ul><h5 id="1-2-计算机硬件介绍"><a href="#1-2-计算机硬件介绍" class="headerlink" title="1.2 计算机硬件介绍"></a>1.2 计算机硬件介绍</h5><p><strong>主要硬件：</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331112521308.png" alt="image-20230331112521308"></p><ul><li>中央处理器(Central Processing Unit,CPU)：是计算机的大脑。它从内存中获取指令，然 后执行这些指令。</li><li>内存(也叫 Random-Access Memory,RAM)：由一个有序的 字节序列组成，用于存储程序及程序需要的数据。 内存是带电存储的(一旦断电数据就会消失)，<strong>一个程序和它的数据在被CPU执行前必须移到计算机的内存中。</strong></li><li>存储设备：内存中的信息在断电时会丢失。那我们可以考虑将程序和数据永久的保存在存储设备上。当计算机 确实需要这些数据时，再移入内存，因为从内存中读取比从存储设备读取要快得多。</li><li>输入设备：键盘（keyboard）和鼠标（mouse） </li><li>输出设备：显示器（monitor）和打印机（printer）</li><li>通信设备：计算机通过通信设备进行联网。</li></ul><p><strong>工作流程：</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331112631103.png" alt="image-20230331112631103"></p><h5 id="1-3-操作系统"><a href="#1-3-操作系统" class="headerlink" title="1.3 操作系统"></a>1.3 操作系统</h5><p>​操作系统(Operating System)是运行在计算机上的最重要的 程序，它可以管理和控制计算机的活动。</p><p><strong>操作系统的主要任务</strong></p><ul><li>控制和监视系统的活动 </li><li>分配和调配系统资源 </li><li>调度操作</li></ul><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331113834366.png" alt="image-20230331113834366"></p><h3 id="二、Java语言概述"><a href="#二、Java语言概述" class="headerlink" title="二、Java语言概述"></a>二、Java语言概述</h3><h5 id="2-1-基础知识图解"><a href="#2-1-基础知识图解" class="headerlink" title="2.1 基础知识图解"></a>2.1 基础知识图解</h5><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331114433386.png" alt="image-20230331114433386"></p><h5 id="2-2-Java语言概述"><a href="#2-2-Java语言概述" class="headerlink" title="2.2 Java语言概述"></a>2.2 Java语言概述</h5><ul><li>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一 门高级编程语言。 </li><li>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以 在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使 用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中。 </li><li>随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</li></ul><h5 id="2-3-Java语言的特点"><a href="#2-3-Java语言的特点" class="headerlink" title="2.3 Java语言的特点"></a>2.3 Java语言的特点</h5><ul><li>面向对象：两个基本概念：类、对象 ；三大特性：封装、继承、多态</li><li>健壮性：吸收了C&#x2F;C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与 释放等），提供了一个相对安全的内存管理和访问机制</li><li>跨平台：通过Java语言编写的应用程序在不同的系统平台上都可以运行。<strong>原理</strong>：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java  Virtual Machine) 即可。<strong>由JVM来负责Java程序在该系统中的运行。</strong></li></ul><h5 id="2-4-Java语言运行机制"><a href="#2-4-Java语言运行机制" class="headerlink" title="2.4 Java语言运行机制"></a>2.4 Java语言运行机制</h5><p><strong>核心机制–Java虚拟机</strong></p><ul><li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器</li><li>对于不同的平台，有不同的虚拟机</li><li>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行</li><li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ul><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331145000597.png" alt="image-20230331145000597"></p><p><strong>核心机制–垃圾回收</strong></p><ul><li>Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空 间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。</li><li>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</li></ul><h5 id="2-5-JDK、JRE"><a href="#2-5-JDK、JRE" class="headerlink" title="2.5 JDK、JRE"></a>2.5 JDK、JRE</h5><ul><li>JDK:包含了java的开发工具，也包括了 JRE。所以安装了JDK，就不用在单独安装JRE了。</li><li>JRE:包括Java虚拟机和Java程序所需的核心类库等， 如果想要<strong>运行</strong>一个开发好的Java程序，计算机中<strong>只需要</strong>安装JRE即可。</li></ul><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331145855498.png" alt="image-20230331145855498"></p><p><strong>JDK &#x3D; JRE + 开发工具集（例如Javac编译工具等)</strong></p><p><strong>JRE &#x3D; JVM + Java SE标准类库</strong></p><h5 id="2-6-HelloWorld"><a href="#2-6-HelloWorld" class="headerlink" title="2.6 HelloWorld"></a>2.6 HelloWorld</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(“Hello World!”);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>将 Java 代码编写到扩展名为 .java 的文件中。 </li><li>通过 javac 命令对该 java 文件进行编译。</li><li>通过 java 命令对生成的 class 文件进行运行。</li></ol><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331150445667.png" alt="image-20230331150445667"></p><h5 id="2-7-注释"><a href="#2-7-注释" class="headerlink" title="2.7 注释"></a>2.7 注释</h5><ul><li>Java中的注释类型： 单行注释、 多行注释 、文档注释 (java特有)</li><li>提高了代码的阅读性；调试程序的重要方法。</li><li>注释是一个程序员必须要具有的良好编程习惯。</li></ul><h3 id="三、Java基本语法"><a href="#三、Java基本语法" class="headerlink" title="三、Java基本语法"></a>三、Java基本语法</h3><h5 id="3-1-关键字"><a href="#3-1-关键字" class="headerlink" title="3.1 关键字"></a>3.1 关键字</h5><p><strong>关键字：</strong>被Java语言赋予了<strong>特殊含义</strong>，用做<strong>专门用途</strong>的字符串（单词）</p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331151539034.png" alt="image-20230331151539034"></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331151554196.png" alt="image-20230331151554196"></p><h5 id="3-2-标识符"><a href="#3-2-标识符" class="headerlink" title="3.2 标识符"></a>3.2 标识符</h5><p><strong>标识符：</strong>对各种变量、方法和类等要素命名时使用的字符序列。<strong>凡是自己可以起名字的地方都叫标识符。</strong></p><p><strong>定义合法标识符规则：</strong></p><ul><li>由26个英文字母大小写，0-9 ，_或 $ 组成 </li><li>数字不可以开头。 </li><li>不可以使用关键字和保留字，但能包含关键字和保留字。 </li><li>Java中严格区分大小写，长度无限制。 </li><li>标识符不能包含空格。</li></ul><p><strong>Java中的名称命名规范：</strong></p><ul><li>包名：多单词组成时所有字母都小写：xxxyyyzzz </li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz </li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个 单词首字母大写：xxxYyyZzzz</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul><h5 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h5><p><strong>概念：</strong>内存中的一个存储区域 ，该区域的数据可以在同一类型范围内不断变化 ，变量是程序中最基本的存储单元。用于在内存中保存数据。</p><p><strong>Java中每个变量必须先声明，后使用</strong></p><ul><li>声明变量：&lt;数据类型&gt; &lt;变量名称&gt;</li><li>变量赋值：&lt;变量名称&gt; &#x3D; &lt;值&gt;</li><li>声明和赋值：&lt;数据类型&gt; &lt;变量名&gt; &#x3D; &lt;初始化值&gt;</li></ul><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331153146241.png" alt="image-20230331153146241"></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230402084022653.png" alt="image-20230402084022653"></p><p><strong>整数类型：byte、short、int、long</strong></p><ul><li>Java的整型常量默认为int型，声明long型常量须后加“l”或“L”</li><li>Java程序中变量通常量声明为int型，除非不足以表示较大的数，才使用long</li></ul><p><strong>浮点类型：float、double</strong></p><ul><li>Java的浮点型常量默认为double型，声明float型常量，须加“f”或“F”</li></ul><p><strong>字符类型:char</strong></p><ul><li>‘a’–97 ‘A’–65 ‘0’–48</li></ul><p><strong>布尔类型：boolean</strong></p><ul><li>true、false</li></ul><h5 id="3-4-基本数据类型转换"><a href="#3-4-基本数据类型转换" class="headerlink" title="3.4 基本数据类型转换"></a>3.4 基本数据类型转换</h5><p><strong>自动类型转换</strong></p><p>​容量小的类型自动转换为容量大的数据类型。有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的 那种数据类型，然后再进行计算。</p><p>​<strong>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类 型的值将自动转化为字符串(String)类型。</strong></p><p><strong>强制类型转换</strong></p><p>​自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使 用时要加上强制转换符：()，但<strong>可能造成精度降低或溢出</strong>,格外要注意。</p><h5 id="3-5-运算符"><a href="#3-5-运算符" class="headerlink" title="3.5 运算符"></a>3.5 运算符</h5><p><strong>算数运算符</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331154155424.png" alt="image-20230331154155424"></p><p><strong>赋值运算符</strong></p><p>​当“&#x3D;”两侧数据类型不一致时，可以使用自动类型转换或使用强制 类型转换原则进行处理。</p><p>+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;</p><p><strong>关系运算符</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331154610582.png" alt="image-20230331154610582"></p><p><strong>逻辑运算符</strong></p><p>​&amp;—逻辑与 | —逻辑或 ！—逻辑非 &amp;&amp; —短路与 || —短路或 ^ —逻辑异或</p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331154654877.png" alt="image-20230331154654877"></p><p><strong>位运算符</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331154737585.png" alt="image-20230331154737585"></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331154825288.png" alt="image-20230331154825288"></p><p><strong>三元运算符</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331154858807.png" alt="image-20230331154858807"></p><p>​注意：表达式1和表达式2为<strong>同种类型</strong></p><h5 id="3-6-程序流程控制"><a href="#3-6-程序流程控制" class="headerlink" title="3.6 程序流程控制"></a>3.6 程序流程控制</h5><ul><li><p>顺序结构：程序从上到下逐行地执行，中间没有任何判断和跳转。</p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331155309276.png" alt="image-20230331155309276"></p></li><li><p>分支结构：根据条件，选择性地执行某段代码。 有if…else和switch-case两种分支语句。</p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331155337622.png" alt="image-20230331155337622"></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331155437817.png" alt="image-20230331155437817"></p><p>switch(表达式)中表达式的值<strong>必须是下述几种类型之一</strong>：byte，short， char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</p></li><li><p>循环结构：根据循环条件，重复性的执行某段代码。 有while、do…while、for三种循环语句。 </p><p>注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素。</p></li></ul><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331155546276.png" alt="image-20230331155546276"></p><h3 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h3><h5 id="4-1数组的概述"><a href="#4-1数组的概述" class="headerlink" title="4.1数组的概述"></a>4.1数组的概述</h5><p>数组(Array)，是多个相同类型数据按一定顺序排列 的集合，并使用一个名字命名，并通过编号的方式 对这些数据进行统一管理。</p><ul><li>数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。 </li><li>创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是 这块连续空间的首地址。 </li><li>数组的长度一旦确定，就不能修改。 </li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li></ul><h5 id="4-2-数组的使用"><a href="#4-2-数组的使用" class="headerlink" title="4.2 数组的使用"></a>4.2 数组的使用</h5><p>​声明方式：type var[] 或 type[] var；</p><p><strong>动态初始化：</strong>数组声明且为数组元素分配空间与赋值的操作分开进行</p><p><strong>静态初始化：</strong>在定义数组的同时就为数组元素分配空间并赋值。</p><ul><li>定义并用运算符new为之分配空间后，才可以引用数组中的每个元素；</li><li>数组元素的引用方式：数组名[数组元素下标]</li><li>每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的长 度(元素个数)</li></ul><p>二维、三维数组与一维类似</p><h5 id="4-3-Arrays工具类"><a href="#4-3-Arrays工具类" class="headerlink" title="4.3 Arrays工具类"></a>4.3 Arrays工具类</h5><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比 如排序和搜索）的各种方法。</p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331160619173.png" alt="image-20230331160619173"></p><h3 id="五、面向对象编程"><a href="#五、面向对象编程" class="headerlink" title="五、面向对象编程"></a>五、面向对象编程</h3><h5 id="5-1-面向过程与面向对象"><a href="#5-1-面向过程与面向对象" class="headerlink" title="5.1 面向过程与面向对象"></a>5.1 面向过程与面向对象</h5><p>​二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是<strong>功能行为</strong>，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对 象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。 </p><p>​面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如 抽象、分类、继承、聚合、多态等。</p><h5 id="5-2-类和对象"><a href="#5-2-类和对象" class="headerlink" title="5.2 类和对象"></a>5.2 类和对象</h5><p>类(Class)和对象(Object)是面向对象的核心概念。 </p><ul><li>类是对一类事物的描述，是抽象的、概念上的定义 </li><li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。</li></ul><p><strong>类的语法格式</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe">修饰符 <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>    属性声明;<br>    方法声明;<br>&#125;<br>说明：修饰符<span class="hljs-keyword">public</span>：类可以被任意访问<br>类的正文要用&#123; &#125;括起来<br></code></pre></td></tr></table></figure><p><strong>对象的创建和使用</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">创建对象语法： 类名 对象名 <span class="hljs-operator">=</span> new 类名()<span class="hljs-comment">;</span><br>使用“对象名.对象成员”的方式访问对象成员（包括属性和方法）<br></code></pre></td></tr></table></figure><ul><li><strong>堆（Heap）</strong>：此内存区域的唯一目的 就是存放对象实例. </li><li><strong>栈（Stack）</strong>：是指虚拟机栈。虚拟机栈用于存储局部变量等。 局部变量表存放了编译期可知长度的各 种基本数据类型（boolean、byte、 char 、 short 、 int 、 float 、 long 、 double）、对象引用 （reference类型， 它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。 </li><li><strong>方法区（Method Area）</strong>：用于存储已 被虚拟机加载的类信息、常量、静态 变量、即时编译器编译后的 代码等数据。</li></ul><p><strong>抽象类</strong> （abstract）</p><ul><li>抽象类和抽象方法必须使用 abstract 关键字修饰 </li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类 </li><li>抽象类不能实例化 抽象类可以有构造方法 </li><li>抽象类的子类，要么重写抽象类中的所有抽象方法，要么是抽象类</li></ul><p>不能用abstract修饰变量、代码块、构造器； 不能用abstract修饰私有方法、静态方法、final的方法、final的类。</p><p><strong>接口</strong>(interface)</p><ul><li>用interface来定义。 </li><li>接口中的所有成员变量都默认是由public static final修饰的。 </li><li>接口中的所有抽象方法都默认是由public abstract修饰的。 </li><li>接口中没有构造器。 接口采用多继承机制</li></ul><p><strong>接口和抽象类之间的对比</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230402092143006.png" alt="image-20230402092143006"></p><h5 id="5-3-类的成员"><a href="#5-3-类的成员" class="headerlink" title="5.3 类的成员"></a>5.3 类的成员</h5><p><strong>属性：</strong></p><p>​修饰符 数据类型 属性名 &#x3D; 初始化值 ; </p><p><strong>方法：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">修饰符 返回值类型 方法名（参数类型 形参<span class="hljs-number">1</span>, 参数类型 形参<span class="hljs-number">2</span>, ….）｛<br>    方法体程序代码<br>    <span class="hljs-keyword">return</span> 返回值;<br>｝<br></code></pre></td></tr></table></figure><p><strong>方法重载</strong></p><p>​在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</p><p><strong>构造器：</strong></p><p>​构造器的作用：创建对象；给对象进行初始化</p><p><strong>this关键字：</strong></p><ul><li>它在方法内部使用，即这个方法所属对象的引用； </li><li>它在构造器内部使用，表示该构造器正在初始化的对象。</li></ul><p><strong>static 关键字：</strong>被修饰后的成员具备以下特点</p><ul><li>随着类的加载而加载 </li><li>优先于对象存在 </li><li>修饰的成员，被所有对象所共享 </li><li>访问权限允许时，可不创建对象，直接被类调</li></ul><p><strong>final关键字：</strong> final代表最终的意思，可以修饰成员方法，成员变量，类 </p><ul><li>final修饰方法：该方法不能被重写 </li><li>fianl修饰类：该类不能被继承（不能有子类，但是可以有父类） </li><li>final修饰变量：表明该变量是一个常量，<strong>不能再次赋值</strong> 变量是基本类型,不能改变的是值 变量是引用类型,不能改变的是地址值,<strong>但地址里面的内容是可以改变的</strong> </li><li>final在修饰成员变量 初始化时机 在创建的时候，直接给值 在构造方法结束之前，完成赋值</li></ul><p><strong>成员访问特点：</strong></p><ul><li>成员变量：编译看父类，运行看父类 </li><li>成员方法：编译看父类，运行看子类</li></ul><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230402090954329.png" alt="image-20230402090954329"></p><h5 id="5-4-封装"><a href="#5-4-封装" class="headerlink" title="5.4 封装"></a>5.4 封装</h5><p>​使用者对类内部定义的属性(对象的成员变量)的直接操作会导致数据的错误、混乱或安全性问题。</p><p>Java中通过将数据声明为私有的(private)，再提供公共的（public） 方法:getXxx()和setXxx()实现对该属性的操作，以实现下述目的：</p><ul><li>隐藏一个类中不需要对外提供的实现细节；</li><li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑， 限制对属性的不合理操作；</li><li>便于修改，增强代码的可维护性；</li></ul><h5 id="5-5-继承"><a href="#5-5-继承" class="headerlink" title="5.5 继承"></a>5.5 继承</h5><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331165815943.png" alt="image-20230331165815943"></p><p>多个类中存在<strong>相同属性和行为</strong>时，将这些内容抽取到单独一个类中， 那么多个类无需再定义这些属性和行为，只要继承那个类即可。</p><ul><li>继承的出现减少了代码冗余，提高了代码的复用性。 </li><li>继承的出现，更有利于功能的扩展。 </li><li>继承的出现让类与类之间产生了关系，提供了多态的前提。</li></ul><p><strong>方法的重写</strong>：在子类中可以根据需要对从父类中继承来的方法进行改造，也称 为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。</p><p><strong>访问权限修饰符</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331170952641.png" alt="image-20230331170952641"></p><h5 id="5-6-多态"><a href="#5-6-多态" class="headerlink" title="5.6 多态"></a>5.6 多态</h5><p>​对象的多态性：<strong>父类的引用指向子类的对象</strong>（提高了代码的通用性，常称作接口重用）</p><p>​一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就<strong>不能再访问子类中添加的属性和方法</strong></p><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331172705590.png" alt="image-20230331172705590"></p><p>​从子类到父类的类型转换可以自动进行 </p><p>​从父类到子类的类型转换必须通过造型(强制类型转换)实现</p><h3 id="六、异常处理"><a href="#六、异常处理" class="headerlink" title="六、异常处理"></a>六、异常处理</h3><h5 id="6-1-异常概述"><a href="#6-1-异常概述" class="headerlink" title="6.1 异常概述"></a>6.1 异常概述</h5><p>​异常：在Java语言中，将程序执行中发生的不正常情况称为“异常” 。(开发过程中的语法错误和逻辑错误不是异常)</p><p>Java程序在执行过程中所发生的异常事件可分为两类：</p><ul><li>Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。</li><li>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使 用针对性的代码进行处理。例如： 空指针访问 、试图读取不存在的文件、网络连接中断、数组角标越界</li></ul><p><strong>运行时异常</strong></p><p>​是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序 员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。<strong>对于这类异常，可以不作处理</strong>，因为这类异常很普遍，若全处理可能会对 程序的可读性和运行效率产生影响。</p><p><strong>编译时异常</strong></p><p>​是指编译器要求<strong>必须处置的异常</strong>。即程序在运行时由于外界因素造成的一 般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。 对于这类异常，如果程序不处理，可能会带来意想不到的结果。</p><h5 id="6-2-异常处理的方式"><a href="#6-2-异常处理的方式" class="headerlink" title="6.2 异常处理的方式"></a>6.2 异常处理的方式</h5><p><strong>异常的抛出</strong></p><p>​如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处 理。如果异常没有在调用者方法中处理，它继续被抛给这个调用 方法的上层方法。<strong>这个过程将一直继续下去，直到异常被处理</strong>。</p><p>如果一个异常回到main()方法，并且<strong>main()也不处理，则程序运行终止</strong>。</p><p><strong>异常处理</strong>是通过try-catch-finally语句实现的。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lasso">try&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//可能产生异常的代码</span><br>&#125;<br>catch( ExceptionName1 e )&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//当产生ExceptionName1型异常时的处置措施</span><br>&#125;<br>catch( ExceptionName2 e )&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//当产生ExceptionName2型异常时的处置措施</span><br>&#125;<br>finally&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//无论是否发生异常，都无条件执行的语句</span><br>&#125; <br><br></code></pre></td></tr></table></figure><p><strong>声明抛出异常</strong></p><p>​如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明<strong>该方法将不对这些异常进行处理， 而由该方法的调用者负责处理</strong>。在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可 以是方法中产生的异常类型，也可以是它的父类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>public void methodA() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>……<br>&#125; &#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>public void methodA() <span class="hljs-keyword">throws</span> <span class="hljs-type">FileNotFoundException</span> &#123;<br>……<br>&#125; &#125;<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>public void methodA() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123; <span class="hljs-comment">//报错</span><br>……<br>&#125; &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/01/Java%E5%9F%BA%E7%A1%80/image-20230331200001764.png" alt="image-20230331200001764"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
